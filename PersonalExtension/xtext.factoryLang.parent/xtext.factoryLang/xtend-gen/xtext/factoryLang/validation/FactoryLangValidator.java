/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.validation;

import com.google.common.base.Objects;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import xtext.factoryLang.factoryLang.Camera;
import xtext.factoryLang.factoryLang.ColorValue;
import xtext.factoryLang.factoryLang.Crane;
import xtext.factoryLang.factoryLang.CranePositionParameter;
import xtext.factoryLang.factoryLang.Device;
import xtext.factoryLang.factoryLang.DeviceConditional;
import xtext.factoryLang.factoryLang.Disk;
import xtext.factoryLang.factoryLang.DiskMarkSlotOperation;
import xtext.factoryLang.factoryLang.DiskParameter;
import xtext.factoryLang.factoryLang.DiskSlotParameter;
import xtext.factoryLang.factoryLang.DiskStateValue;
import xtext.factoryLang.factoryLang.DiskZoneParameter;
import xtext.factoryLang.factoryLang.FactoryLangPackage;
import xtext.factoryLang.factoryLang.Model;
import xtext.factoryLang.factoryLang.TIME;
import xtext.factoryLang.generator.subgenerators.UppaalGenerator;
import xtext.factoryLang.validation.UppaalHelper;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class FactoryLangValidator extends AbstractFactoryLangValidator {
  public static final String INVALID_VALUE = "invalidValue";
  
  @Check(CheckType.NORMAL)
  public void checkUPPAAL(final Model model) {
    try {
      final String path = "uppaal/system.xml";
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      UppaalGenerator.generate(fsa, model.eResource());
      final File file = new File(path);
      Files.createDirectories(Paths.get(file.getParentFile().toURI()));
      final FileWriter fw = new FileWriter(file);
      final String data = fsa.readTextFile(path).toString();
      fw.write(data);
      fw.close();
      final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
      final String queriesText = data.substring(data.lastIndexOf("<queries>"), data.lastIndexOf("</nta>"));
      StringReader _stringReader = new StringReader(("<?xml version=\"1.0\"?>\n" + queriesText));
      InputSource _inputSource = new InputSource(_stringReader);
      final Document doc = builder.parse(_inputSource);
      doc.getDocumentElement().normalize();
      final NodeList queries = doc.getElementsByTagName("query");
      String executablePath = "";
      boolean _equals = System.getProperty("os.name").equals("Linux");
      boolean _not = (!_equals);
      if (_not) {
        executablePath = "./bin-Windows/verifyta";
      } else {
        executablePath = "./bin-Linux/verifyta";
      }
      final Process process = Runtime.getRuntime().exec(((executablePath + " -q -s ") + path));
      InputStream _inputStream = process.getInputStream();
      final UppaalHelper.StreamGobbler streamGobbler = new UppaalHelper.StreamGobbler(_inputStream);
      Executors.newSingleThreadExecutor().submit(streamGobbler);
      process.waitFor();
      if (((!streamGobbler.getOutput().isEmpty()) && streamGobbler.getOutput().contains("Formula is NOT satisfied"))) {
        final Stream<String> stream = Arrays.<String>stream(streamGobbler.getOutput().split("\\."));
        final List<String> streamArr = stream.collect(Collectors.<String>toList());
        final Predicate<String> _function = (String it) -> {
          return it.contains("Formula is NOT satisfied");
        };
        final Stream<String> filtered = streamArr.stream().filter(_function);
        final List<String> filteredArr = filtered.collect(Collectors.<String>toList());
        final Function1<String, String> _function_1 = (String it) -> {
          return queries.item(streamArr.indexOf(it)).getTextContent().trim();
        };
        final String queriesFailed = IterableExtensions.join(ListExtensions.<String, String>map(filteredArr, _function_1), "\n");
        this.error(("UPPAAL verification failed the following queries:\n" + queriesFailed), 
          FactoryLangPackage.Literals.MODEL__STATEMENTS, FactoryLangValidator.INVALID_VALUE);
        System.out.println("ERROR");
        System.out.println(streamGobbler.getOutput());
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Check(CheckType.FAST)
  public void checkCranePositionParameter(final CranePositionParameter parameter) {
    boolean _not = (!((parameter.getDegree() >= 0) && (parameter.getDegree() <= 359)));
    if (_not) {
      this.error("Degree value should be between 0 and 359 degrees (inclusive)", 
        FactoryLangPackage.Literals.CRANE_POSITION_PARAMETER__DEGREE, FactoryLangValidator.INVALID_VALUE);
    }
  }
  
  @Check(CheckType.FAST)
  public void checkDiskZoneParameter(final DiskZoneParameter parameter) {
    Disk _containerOfType = EcoreUtil2.<Disk>getContainerOfType(parameter, Disk.class);
    final Disk disk = ((Disk) _containerOfType);
    DiskParameter _slotParameter = disk.getSlotParameter();
    final int nSlots = ((DiskSlotParameter) _slotParameter).getSize();
    boolean _not = (!((parameter.getSlot() > 0) && (parameter.getSlot() <= nSlots)));
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Slot must be within available slots (1-");
      _builder.append(nSlots);
      _builder.append(")");
      this.error(_builder.toString(), FactoryLangPackage.Literals.DISK_ZONE_PARAMETER__SLOT, 
        FactoryLangValidator.INVALID_VALUE);
    }
  }
  
  @Check(CheckType.FAST)
  public void checkDiskMarkSlotOperation(final DiskMarkSlotOperation operation) {
    if (((!operation.eIsSet(FactoryLangPackage.Literals.DISK_MARK_SLOT_OPERATION__QUANTITY)) || 
      (!operation.eIsSet(FactoryLangPackage.Literals.DISK_MARK_SLOT_OPERATION__MEASURE)))) {
      return;
    }
    final int quantity = operation.getQuantity();
    final TIME measure = operation.getMeasure();
    if ((quantity < 1)) {
      this.error("The time to finish should be>= 1", FactoryLangPackage.Literals.DISK_MARK_SLOT_OPERATION__QUANTITY, FactoryLangValidator.INVALID_VALUE);
      return;
    }
    if ((quantity == 1)) {
      boolean _not = (!((Objects.equal(measure, TIME.SECOND) || Objects.equal(measure, TIME.MINUTE)) || Objects.equal(measure, TIME.HOUR)));
      if (_not) {
        this.error("Use singular unit notation when quantity is <= 1", FactoryLangPackage.Literals.DISK_MARK_SLOT_OPERATION__MEASURE, 
          FactoryLangValidator.INVALID_VALUE);
      }
      return;
    } else {
      boolean _not_1 = (!((Objects.equal(measure, TIME.SECONDS) || Objects.equal(measure, TIME.MINUTES)) || Objects.equal(measure, TIME.HOURS)));
      if (_not_1) {
        this.error("Use plural unit notation when quantity is> 1", FactoryLangPackage.Literals.DISK_MARK_SLOT_OPERATION__MEASURE, 
          FactoryLangValidator.INVALID_VALUE);
      }
    }
  }
  
  @Check(CheckType.FAST)
  public void checkDeviceConditionalValues(final DeviceConditional conditional) {
    if (((!conditional.eIsSet(FactoryLangPackage.Literals.DEVICE_CONDITIONAL__DEVICE)) || 
      (!conditional.eIsSet(FactoryLangPackage.Literals.DEVICE_CONDITIONAL__DEVICE_VALUE)))) {
      return;
    }
    final Device device = conditional.getDevice();
    final EObject value = conditional.getDeviceValue().getValue();
    boolean _matched = false;
    if ((device instanceof Crane)) {
      _matched=true;
      if ((value instanceof DiskStateValue)) {
        String _name = device.getName();
        String _plus = (_name + " cannot be compared to disk states");
        this.error(_plus, FactoryLangPackage.Literals.DEVICE_CONDITIONAL__DEVICE_VALUE, 
          FactoryLangValidator.INVALID_VALUE);
        return;
      }
      if ((value instanceof ColorValue)) {
        String _name_1 = device.getName();
        String _plus_1 = (_name_1 + " cannot be compared to colors");
        this.error(_plus_1, FactoryLangPackage.Literals.DEVICE_CONDITIONAL__DEVICE_VALUE, 
          FactoryLangValidator.INVALID_VALUE);
        return;
      }
      return;
    }
    if (!_matched) {
      if ((device instanceof Disk)) {
        _matched=true;
        if ((value instanceof ColorValue)) {
          String _name_2 = device.getName();
          String _plus_2 = (_name_2 + " cannot be compared to colors");
          this.error(_plus_2, FactoryLangPackage.Literals.DEVICE_CONDITIONAL__DEVICE_VALUE, 
            FactoryLangValidator.INVALID_VALUE);
          return;
        }
      }
    }
    if (!_matched) {
      if ((device instanceof Camera)) {
        _matched=true;
        if ((value instanceof DiskStateValue)) {
          String _name_3 = device.getName();
          String _plus_3 = (_name_3 + " cannot be compared to disk states");
          this.error(_plus_3, FactoryLangPackage.Literals.DEVICE_CONDITIONAL__DEVICE_VALUE, 
            FactoryLangValidator.INVALID_VALUE);
          return;
        }
        if ((value instanceof ColorValue)) {
          String _name_4 = device.getName();
          String _plus_4 = (_name_4 + " cannot be compared to colors");
          this.error(_plus_4, FactoryLangPackage.Literals.DEVICE_CONDITIONAL__DEVICE_VALUE, 
            FactoryLangValidator.INVALID_VALUE);
          return;
        }
        return;
      }
    }
  }
}
