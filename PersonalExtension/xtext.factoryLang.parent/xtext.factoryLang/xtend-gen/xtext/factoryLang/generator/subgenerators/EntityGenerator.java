package xtext.factoryLang.generator.subgenerators;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;

@SuppressWarnings("all")
public class EntityGenerator {
  public static void generate(final IFileSystemAccess2 fsa, final boolean shouldGenerateCranes, final boolean shouldGenerateDisks, final boolean shouldGenerateCameras) {
    if (shouldGenerateCranes) {
      EntityGenerator.generateCraneEntity(fsa);
    }
    if (shouldGenerateDisks) {
      EntityGenerator.generateDiskEntity(fsa);
      EntityGenerator.generateSlotEntity(fsa);
      EntityGenerator.generateSlotStateEnum(fsa);
    }
    if (shouldGenerateCameras) {
      EntityGenerator.generateCameraEntity(fsa);
    }
  }
  
  public static void generateCraneEntity(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using Mqtt;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace Entities");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public class Crane");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly string _name;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly Dictionary<string, int> _positions;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly IMqttService _mqttService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public Crane(string name,Dictionary<string, int> positions, IMqttService mqttService)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_name = name;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_positions = positions;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_mqttService = mqttService;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void AddPosition(string name, int angle)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_positions.Add(name, angle);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public async Task GoTo(string positionName)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Moving, \"Running\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Angle, _positions[positionName].ToString());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public async Task GoTo(int position)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Moving, \"Running\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Angle, position.ToString());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public async Task PickupItem()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Moving, \"Running\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Elevation, \"0\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Magnet, \"1\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await Task.Delay(2000);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Moving, \"Running\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Elevation, \"1\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public async Task DropItem()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Moving, \"Running\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Elevation, \"0\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Magnet, \"0\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Moving, \"Running\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Crane(_name).Elevation, \"1\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private async Task WaitTillIdle(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("while(!IsIdle())");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("await Task.Delay(100);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private bool IsIdle(){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return _mqttService.GetMessage(MqttTopics.Crane(_name).Moving) == \"Stopped\" && _mqttService.GetMessage(MqttTopics.Disk(_name).Moving) == \"Stopped\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public string GetName()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return _name;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(
      "OrchestratorService/Entities/Crane.cs", _builder);
  }
  
  protected static void generateDiskEntity(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using System;");
    _builder.newLine();
    _builder.append("using Mqtt;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace Entities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Disk");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private readonly string _name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int _currentOffset;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private readonly Dictionary<int, Slot> _slots;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private readonly Dictionary<string, int> _zones;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private readonly IMqttService _mqttService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Disk(string name, int slots, Dictionary<string, int> zones, IMqttService mqttService)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_name = name;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_slots = new Dictionary<int, Slot>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (int i = 0; i < slots; i++)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_slots.Add(i, new Slot(i));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_zones = zones;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_mqttService = mqttService;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Slot GetEmptySlot()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots.FirstOrDefault(x => x.Value.SlotState == SlotState.Empty).Value;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int GetEmptySlotNumber()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (_slots.Any(x => x.Value.SlotState == SlotState.Empty))");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return _slots.FirstOrDefault(x => x.Value.SlotState == SlotState.Empty).Key;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return -1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("#region MoveSlot methods");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public async Task MoveSlot(string fromZoneName, string toZoneName)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var zonesToMove = mod(_currentOffset + (_zones[toZoneName] - _zones[fromZoneName]), _slots.Count);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_currentOffset = zonesToMove;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Disk(_name).Moving, \"Running\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Disk(_name).Zone, zonesToMove.ToString()); //TODO: Test if this works, _currentOffset.ToString() might be correct");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public async Task MoveSlot(string fromZoneName, int toZone)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var fromZone = _zones[fromZoneName];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await MoveSlot(fromZone, toZone);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public async Task MoveSlot(int fromZone, string toZoneName)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var toZone = _zones[toZoneName];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await MoveSlot(fromZone, toZone);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public async Task MoveSlot(int fromZone, int toZone)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var zonesToMove = mod((toZone - fromZone), _slots.Count);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_currentOffset = zonesToMove;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Disk(_name).Moving, \"Running\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Disk(_name).Zone, zonesToMove.ToString()); //TODO: Test if this works, _currentOffset.ToString() might be correct");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await WaitTillIdle();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("internal async Task WaitForIntake()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await _mqttService.SendMessage(\"intake\", \"intake\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (_mqttService.GetMessage(\"intake\") != \"done\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await Task.Delay(100);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("#endregion");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private async Task WaitTillIdle(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(!IsIdle())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await Task.Delay(100);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private bool IsIdle(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _mqttService.GetMessage(MqttTopics.Disk(_name).Moving) == \"Stopped\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public bool IsFull()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots.All(x => x.Value.SlotState == SlotState.InProgress || x.Value.SlotState == SlotState.Complete);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public bool IsEmpty()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots.All(x => x.Value.SlotState == SlotState.Empty);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Slot GetSlot(int slot)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots[slot];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Slot GetSlot(string slotName)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var slot = _slots[mod((_currentOffset - _zones[slotName]), 8)];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Console.WriteLine($\"Getting slot at: {slotName} Got slot: {slot.Number}\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return slot;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("#region MarkSlot methods");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public bool SlotHasMark(int slot, string mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots[slot].HasMark(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public bool SlotHasMark(int slot, int mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots[slot].HasMark(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void MarkSlot(string slotName, SlotState mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var slot = GetSlot(slotName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Console.WriteLine($\"Marking slot at {slot.Number} with {Enum.GetName(mark)}\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(mark == SlotState.Empty)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("slot.RemoveAllMarks();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("slot.SlotState = mark;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void MarkSlot(int slotName, SlotState mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var slot = GetSlot(slotName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Console.WriteLine($\"Marking slot at {slot.Number} with {Enum.GetName(mark)}\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(mark == SlotState.Empty)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("slot.RemoveAllMarks();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("slot.SlotState = mark;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void MarkSlot(string slotName, string mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GetSlot(slotName).AddMark(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void MarkSlot(int slotName, string mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GetSlot(slotName).AddMark(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void MarkSlot(string slotName, int mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GetSlot(slotName).AddMark(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void RemoveSlotMark(int slotName, string mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GetSlot(slotName).RemoveMark(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void RemoveSlotMark(int slotName, int mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("GetSlot(slotName).RemoveMark(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("#endregion");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Slot> GetSlots()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots.Select(x => x.Value).ToList();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Slot> GetSlotsWithMark(SlotState mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots.Where(x => x.Value.SlotState == mark).Select(x => x.Value).ToList();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Slot> GetSlotsWithMark(int mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots.Where(x => x.Value.HasMark(mark)).Select(x => x.Value).ToList();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Slot> GetSlotsWithMark(string mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _slots.Where(x => x.Value.HasMark(mark)).Select(x => x.Value).ToList();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int GetZone(string zoneName)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _zones[zoneName];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int mod(int x, int m) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return (x%m + m)%m;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(
      "OrchestratorService/Entities/Disk.cs", _builder);
  }
  
  public static void generateCameraEntity(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using Mqtt;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace Entities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Camera");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private readonly string _name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private readonly IMqttService _mqttService;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private readonly List<string> _colors;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Camera(string name, List<string> colors, IMqttService mqttService)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_colors = colors;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_mqttService = mqttService;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public async Task<string> Scan()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Camera(_name).Color, \"\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await _mqttService.SendMessage(MqttTopics.Camera(_name).Scan, \"GetColor\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("await WaitWhileIdle();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _mqttService.GetMessage(MqttTopics.Camera(_name).Color) ?? \"RED\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private async Task WaitWhileIdle(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(IsIdle())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await Task.Delay(100);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private bool IsIdle(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return string.IsNullOrEmpty(_mqttService.GetMessage(MqttTopics.Camera(_name).Color));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public string GetName()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(
      "OrchestratorService/Entities/Camera.cs", _builder);
  }
  
  public static void generateSlotEntity(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace Entities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Slot");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private readonly List<string> _marks = new();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public SlotState SlotState { get; set; } = SlotState.Empty;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int Number { get; set; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Slot(int number)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Number = number;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public bool HasMark(string mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _marks.Contains(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public bool HasMark(int mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return _marks.Contains(mark.ToString());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void AddMark(string mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_marks.Add(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void AddMark(int mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_marks.Add(mark.ToString());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void RemoveMark(string mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_marks.Remove(mark);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void RemoveMark(int mark)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_marks.Remove(mark.ToString());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void RemoveAllMarks()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("_marks.Clear();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(
      "OrchestratorService/Entities/Slot.cs", _builder);
  }
  
  public static void generateSlotStateEnum(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace Entities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public enum SlotState ");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Empty,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("InProgress,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Complete");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(
      "OrchestratorService/Entities/SlotState.cs", _builder);
  }
}
