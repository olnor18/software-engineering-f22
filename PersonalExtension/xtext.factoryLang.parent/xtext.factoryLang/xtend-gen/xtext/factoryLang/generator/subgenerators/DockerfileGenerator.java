package xtext.factoryLang.generator.subgenerators;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;

@SuppressWarnings("all")
public class DockerfileGenerator {
  public static void generate(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("FROM mcr.microsoft.com/dotnet/runtime:6.0 AS final");
    _builder.newLine();
    _builder.append("WORKDIR /app");
    _builder.newLine();
    _builder.append("ARG TARGETARCH");
    _builder.newLine();
    _builder.append("ADD ./${TARGETARCH}.tar /app");
    _builder.newLine();
    _builder.append("ENTRYPOINT [\"dotnet\", \"OrchestratorService.dll\"]");
    _builder.newLine();
    fsa.generateFile("OrchestratorService/Dockerfile", _builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build");
    _builder_1.newLine();
    _builder_1.append("WORKDIR /src");
    _builder_1.newLine();
    _builder_1.append("COPY [\"OrchestratorService.csproj\", \"./\"]");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("ARG TARGETPLATFORM");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("RUN if [ \"$TARGETPLATFORM\" = \"linux/amd64\" ]; then \\");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("RID=linux-x64 ; \\");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("elif [ \"$TARGETPLATFORM\" = \"linux/arm64\" ]; then \\");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("RID=linux-arm64 ; \\");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("elif [ \"$TARGETPLATFORM\" = \"linux/arm/v7\" ]; then \\");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("RID=linux-arm ; \\");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("else\\");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("RID=linux-x64 ; \\");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("fi \\");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("&& dotnet restore -r $RID");
    _builder_1.newLine();
    _builder_1.append("COPY . .");
    _builder_1.newLine();
    _builder_1.append("RUN dotnet build \"OrchestratorService.csproj\" -c Release -o /app/build");
    _builder_1.newLine();
    _builder_1.append("RUN dotnet publish \"OrchestratorService.csproj\" -c Release -o /app/publish");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("FROM scratch as copy-state");
    _builder_1.newLine();
    _builder_1.append("COPY --from=build /app/publish /");
    _builder_1.newLine();
    fsa.generateFile("OrchestratorService/DockerfileBuild", _builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("folder=./output/OrchestratorService");
    _builder_2.newLine();
    _builder_2.append("tag=ghcr.io/olnor18/software-engineering-f22/orchestrator-service");
    _builder_2.newLine();
    _builder_2.append("docker buildx build -o type=tar,dest=- --build-arg TARGETPLATFORM=linux/amd64 -f $folder/DockerfileBuild -t app:amd64 $folder > $folder/amd64.tar");
    _builder_2.newLine();
    _builder_2.append("docker buildx build -o type=tar,dest=- --build-arg TARGETPLATFORM=linux/arm64 -f $folder/DockerfileBuild -t app:arm64 $folder > $folder/arm64.tar");
    _builder_2.newLine();
    _builder_2.append("docker buildx build -o type=tar,dest=- --build-arg TARGETPLATFORM=linux/arm/v7 -f $folder/DockerfileBuild -t app:arm $folder > $folder/arm.tar");
    _builder_2.newLine();
    _builder_2.append("docker buildx build --push -t $tag:latest --platform linux/arm/v7,linux/arm64,linux/amd64 $folder");
    _builder_2.newLine();
    _builder_2.append("exit 0");
    _builder_2.newLine();
    fsa.generateFile("OrchestratorService/build.sh", _builder_2);
  }
}
