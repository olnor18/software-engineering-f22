package xtext.factoryLang.generator.subgenerators;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;

@SuppressWarnings("all")
public class MqttGenerator {
  public static void generate(final IFileSystemAccess2 fsa) {
    MqttGenerator.generateMqttTopics(fsa);
    MqttGenerator.generateIMqttService(fsa);
    MqttGenerator.generateMqttService(fsa);
  }
  
  protected static void generateMqttService(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("using System.Text;");
    _builder.newLine();
    _builder.append("using MQTTnet;");
    _builder.newLine();
    _builder.append("using MQTTnet.Client.Connecting;");
    _builder.newLine();
    _builder.append("using MQTTnet.Client.Disconnecting;");
    _builder.newLine();
    _builder.append("using MQTTnet.Client.Options;");
    _builder.newLine();
    _builder.append("using MQTTnet.Client.Receiving;");
    _builder.newLine();
    _builder.append("using MQTTnet.Extensions.ManagedClient;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace Mqtt");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public class MqttService : IMqttService");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private const string ClientId = \"OrchestratorService\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private const string Ip = \"192.168.10.1\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private const int Port = 1883;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly IManagedMqttClient _mqttClient;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private readonly Dictionary<string, string> messages = new();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public MqttService()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MqttClientOptionsBuilder builder = new MqttClientOptionsBuilder()");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithClientId(ClientId)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTcpServer(Ip, Port);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ManagedMqttClientOptions options = new ManagedMqttClientOptionsBuilder()");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithAutoReconnectDelay(TimeSpan.FromSeconds(60))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithClientOptions(builder.Build())");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".Build();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_mqttClient = new MqttFactory().CreateManagedMqttClient();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_mqttClient.ConnectedHandler = new MqttClientConnectedHandlerDelegate(OnConnected);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_mqttClient.DisconnectedHandler = new MqttClientDisconnectedHandlerDelegate(OnDisconnected);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_mqttClient.ConnectingFailedHandler = new ConnectingFailedHandlerDelegate(OnConnectingFailed);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_mqttClient.ApplicationMessageReceivedHandler = new MqttApplicationMessageReceivedHandlerDelegate(OnMessageReceived);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_mqttClient.StartAsync(options).GetAwaiter().GetResult();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var mqttSubscribeOptions = new MqttFactory().CreateSubscribeOptionsBuilder()");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Crane(\"+\").Angle))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Crane(\"+\").Elevation))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Crane(\"+\").Magnet))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Crane(\"+\").Moving))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Disk(\"+\").Zone))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Disk(\"+\").Moving))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Camera(\"+\").Color))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Camera(\"+\").Scanning))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Camera(\"+\").Scan))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".WithTopicFilter(x => x.WithTopic(MqttTopics.Utility(\"intake\").WaitForIntake))");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".Build();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("_mqttClient.SubscribeAsync(mqttSubscribeOptions.TopicFilters).GetAwaiter().GetResult();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void OnMessageReceived(MqttApplicationMessageReceivedEventArgs obj)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var topic = obj.ApplicationMessage.Topic;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (obj.ApplicationMessage.Payload == null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("messages[topic] = \"\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("messages[topic] = Encoding.Default.GetString(obj.ApplicationMessage.Payload);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public string GetMessage(string topic)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("messages.TryGetValue(topic, out var msg);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return msg ?? \"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public async Task SendMessage(string topic, string message)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Console.WriteLine($\"Sending message to {topic}: {message}\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var mqttMessage = new MqttApplicationMessage()");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Topic = topic,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Payload = Encoding.ASCII.GetBytes(message)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("await _mqttClient.PublishAsync(mqttMessage);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!messages.TryAdd(topic, message))");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("messages[topic] = message;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void OnConnected(MqttClientConnectedEventArgs obj)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Console.WriteLine(\"Successfully connected.\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void OnConnectingFailed(ManagedProcessFailedEventArgs obj)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Console.WriteLine(\"Couldn\'t connect to broker.\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private void OnDisconnected(MqttClientDisconnectedEventArgs obj)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Console.WriteLine(\"Successfully disconnected.\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(
      "OrchestratorService/Mqtt/MqttService.cs", _builder);
  }
  
  protected static void generateIMqttService(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace Mqtt");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public interface IMqttService");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Task SendMessage(string topic, string message);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("string GetMessage(string topic);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(
      "OrchestratorService/Mqtt/IMqttService.cs", _builder);
  }
  
  protected static void generateMqttTopics(final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("namespace Mqtt");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static class MqttTopics");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static CraneTopic Crane(string name)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new CraneTopic(name);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public class CraneTopic");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("private string Name { get; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public CraneTopic(string name)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Name = name;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Angle { get => $\"{Name}/angle\"; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Elevation { get => $\"{Name}/elevation\"; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Magnet { get => $\"{Name}/magnet\"; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Moving { get => $\"{Name}/moving\"; }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static DiskTopic Disk(string name)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new DiskTopic(name);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public class DiskTopic");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("private string Name { get; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public DiskTopic(string name)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Name = name;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Zone { get => $\"{Name}/zone\"; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Moving { get => $\"{Name}/moving\"; }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static CameraTopic Camera(string name)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new CameraTopic(name);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public class CameraTopic");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("private string Name { get; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public CameraTopic(string name)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Name = name;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Scan { get => $\"{Name}/command\"; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Color { get => $\"{Name}/result\"; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string Scanning { get => $\"{Name}/scanning\"; }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public static UtilityTopic Utility(string name)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new UtilityTopic(name);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public class UtilityTopic");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("private string Name { get; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public UtilityTopic(string name)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Name = name;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public string WaitForIntake { get => $\"{Name}\"; }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile(
      "OrchestratorService/Mqtt/MqttTopics.cs", _builder);
  }
}
