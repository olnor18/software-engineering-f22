/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.generator;

import com.google.common.collect.Iterators;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import xtext.factoryLang.factoryLang.Camera;
import xtext.factoryLang.factoryLang.Configuration;
import xtext.factoryLang.factoryLang.Crane;
import xtext.factoryLang.factoryLang.Device;
import xtext.factoryLang.factoryLang.Disk;
import xtext.factoryLang.factoryLang.Model;
import xtext.factoryLang.factoryLang.Statement;
import xtext.factoryLang.generator.subgenerators.CsprojGenerator;
import xtext.factoryLang.generator.subgenerators.DockerfileGenerator;
import xtext.factoryLang.generator.subgenerators.EntityGenerator;
import xtext.factoryLang.generator.subgenerators.MqttGenerator;
import xtext.factoryLang.generator.subgenerators.ProgramGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FactoryLangGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    final Function1<Configuration, Device> _function = (Configuration it) -> {
      return it.getDevice();
    };
    final List<Device> devices = ListExtensions.<Configuration, Device>map(model.getConfigurations(), _function);
    final EList<Statement> statements = model.getStatements();
    try {
      ProgramGenerator.generate(fsa, devices, statements);
      CsprojGenerator.generate(fsa);
      DockerfileGenerator.generate(fsa);
      MqttGenerator.generate(fsa);
      final Function1<Device, Boolean> _function_1 = (Device it) -> {
        return Boolean.valueOf((it instanceof Crane));
      };
      int _size = IterableExtensions.size(IterableExtensions.<Device>filter(devices, _function_1));
      boolean _greaterThan = (_size > 0);
      final Function1<Device, Boolean> _function_2 = (Device it) -> {
        return Boolean.valueOf((it instanceof Disk));
      };
      int _size_1 = IterableExtensions.size(IterableExtensions.<Device>filter(devices, _function_2));
      boolean _greaterThan_1 = (_size_1 > 0);
      final Function1<Device, Boolean> _function_3 = (Device it) -> {
        return Boolean.valueOf((it instanceof Camera));
      };
      int _size_2 = IterableExtensions.size(IterableExtensions.<Device>filter(devices, _function_3));
      boolean _greaterThan_2 = (_size_2 > 0);
      EntityGenerator.generate(fsa, _greaterThan, _greaterThan_1, _greaterThan_2);
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        e.printStackTrace();
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
