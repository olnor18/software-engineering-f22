/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLang.scoping;

import com.google.common.base.Objects;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import xtext.factoryLang.factoryLang.CameraScanOperation;
import xtext.factoryLang.factoryLang.Configuration;
import xtext.factoryLang.factoryLang.CraneOperation;
import xtext.factoryLang.factoryLang.Device;
import xtext.factoryLang.factoryLang.DeviceConditional;
import xtext.factoryLang.factoryLang.DeviceValue;
import xtext.factoryLang.factoryLang.DiskOperation;
import xtext.factoryLang.factoryLang.FactoryLangPackage;
import xtext.factoryLang.factoryLang.ForEach;
import xtext.factoryLang.factoryLang.Model;
import xtext.factoryLang.factoryLang.Operation;
import xtext.factoryLang.factoryLang.Parameter;
import xtext.factoryLang.factoryLang.Variable;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class FactoryLangScopeProvider extends AbstractFactoryLangScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _matched = false;
    if (Objects.equal(reference, FactoryLangPackage.Literals.CRANE_OPERATION__TARGET)) {
      _matched=true;
    }
    if (!_matched) {
      if (Objects.equal(reference, FactoryLangPackage.Literals.DISK_MOVE_SLOT_OPERATION__SOURCE)) {
        _matched=true;
      }
    }
    if (!_matched) {
      if (Objects.equal(reference, FactoryLangPackage.Literals.DISK_MOVE_SLOT_OPERATION__TARGET)) {
        _matched=true;
      }
    }
    if (!_matched) {
      if (Objects.equal(reference, FactoryLangPackage.Literals.DISK_MOVE_VARIABLE_SLOT_OPERATION__TARGET)) {
        _matched=true;
      }
    }
    if (!_matched) {
      if (Objects.equal(reference, FactoryLangPackage.Literals.DISK_MOVE_EMPTY_SLOT_OPERATION__TARGET)) {
        _matched=true;
      }
    }
    if (!_matched) {
      if (Objects.equal(reference, FactoryLangPackage.Literals.DISK_MARK_SLOT_OPERATION__TARGET)) {
        _matched=true;
      }
    }
    if (_matched) {
      return this.getOperationTargetScope(((Operation) context));
    }
    if (!_matched) {
      if (Objects.equal(reference, FactoryLangPackage.Literals.DISK_MOVE_VARIABLE_SLOT_OPERATION__VARIABLE)) {
        _matched=true;
      }
      if (!_matched) {
        if (Objects.equal(reference, FactoryLangPackage.Literals.VARIABLE_CONDITIONAL__VARIABLE)) {
          _matched=true;
        }
      }
      if (_matched) {
        return this.getVariableScope(context, context);
      }
    }
    if (!_matched) {
      if (Objects.equal(reference, FactoryLangPackage.Literals.DEVICE_VALUE__REF)) {
        _matched=true;
        return this.getDeviceValueRefScope(((DeviceValue) context));
      }
    }
    return super.getScope(context, reference);
  }
  
  public IScope getVariableScope(final EObject currentContext, final EObject context) {
    final EObject parent = currentContext.eContainer();
    final ForEach nextForEach = EcoreUtil2.<ForEach>getContainerOfType(parent, ForEach.class);
    if ((nextForEach != null)) {
      Variable _variable = nextForEach.getVariable();
      return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(_variable)), this.getVariableScope(nextForEach, context));
    }
    return this.getGlobalRefValueScope(context);
  }
  
  public IScope getOperationTargetScope(final Operation operation) {
    EObject _rootContainer = EcoreUtil2.getRootContainer(operation);
    final Model root = ((Model) _rootContainer);
    String tempDeviceName = "";
    boolean _matched = false;
    if ((operation instanceof CraneOperation)) {
      _matched=true;
      tempDeviceName = ((CraneOperation) operation).getDevice().getName();
    }
    if (!_matched) {
      if ((operation instanceof DiskOperation)) {
        _matched=true;
        tempDeviceName = ((DiskOperation) operation).getDevice().getName();
      }
    }
    final String deviceName = tempDeviceName;
    final Function1<Configuration, Boolean> _function = (Configuration it) -> {
      String _name = it.getDevice().getName();
      return Boolean.valueOf(Objects.equal(_name, deviceName));
    };
    final Function1<Configuration, Device> _function_1 = (Configuration it) -> {
      return it.getDevice();
    };
    final List<Device> device = IterableExtensions.<Device>toList(IterableExtensions.<Configuration, Device>map(IterableExtensions.<Configuration>filter(root.getConfigurations(), _function), _function_1));
    final EList<Parameter> targets = device.get(0).getTargets();
    return Scopes.scopeFor(targets);
  }
  
  public IScope getGlobalRefValueScope(final EObject context) {
    EObject _rootContainer = EcoreUtil2.getRootContainer(context);
    final Model root = ((Model) _rootContainer);
    final Function1<CameraScanOperation, Variable> _function = (CameraScanOperation it) -> {
      return it.getVariable();
    };
    final List<Variable> cameraScanOperations = IterableExtensions.<Variable>toList(ListExtensions.<CameraScanOperation, Variable>map(EcoreUtil2.<CameraScanOperation>getAllContentsOfType(root, CameraScanOperation.class), _function));
    return Scopes.scopeFor(cameraScanOperations);
  }
  
  public IScope getDeviceValueRefScope(final DeviceValue deviceValue) {
    final DeviceConditional deviceConditional = EcoreUtil2.<DeviceConditional>getContainerOfType(deviceValue, DeviceConditional.class);
    final String deviceName = deviceConditional.getDevice().getName();
    EObject _rootContainer = EcoreUtil2.getRootContainer(deviceValue);
    final Model root = ((Model) _rootContainer);
    final Function1<Configuration, Boolean> _function = (Configuration it) -> {
      String _name = it.getDevice().getName();
      return Boolean.valueOf(Objects.equal(_name, deviceName));
    };
    final Function1<Configuration, Device> _function_1 = (Configuration it) -> {
      return it.getDevice();
    };
    final Device device = ((Device[])Conversions.unwrapArray(IterableExtensions.<Configuration, Device>map(IterableExtensions.<Configuration>filter(root.getConfigurations(), _function), _function_1), Device.class))[0];
    EList<Parameter> targets = device.getTargets();
    return Scopes.scopeFor(targets);
  }
}
