/*
 * generated by Xtext 2.26.0
 */
package xtext.factoryLang.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.factoryLang.factoryLang.Camera;
import xtext.factoryLang.factoryLang.CameraColorParameter;
import xtext.factoryLang.factoryLang.CameraScanOperation;
import xtext.factoryLang.factoryLang.ColorValue;
import xtext.factoryLang.factoryLang.Configuration;
import xtext.factoryLang.factoryLang.Crane;
import xtext.factoryLang.factoryLang.CraneDropOperation;
import xtext.factoryLang.factoryLang.CranePickupOperation;
import xtext.factoryLang.factoryLang.CranePositionParameter;
import xtext.factoryLang.factoryLang.DeviceConditional;
import xtext.factoryLang.factoryLang.DeviceValue;
import xtext.factoryLang.factoryLang.Disk;
import xtext.factoryLang.factoryLang.DiskMarkSlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveEmptySlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveSlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveVariableSlotOperation;
import xtext.factoryLang.factoryLang.DiskSlotParameter;
import xtext.factoryLang.factoryLang.DiskSlotStateValue;
import xtext.factoryLang.factoryLang.DiskSlotValue;
import xtext.factoryLang.factoryLang.DiskStateValue;
import xtext.factoryLang.factoryLang.DiskWaitOperation;
import xtext.factoryLang.factoryLang.DiskZoneParameter;
import xtext.factoryLang.factoryLang.FactoryLangPackage;
import xtext.factoryLang.factoryLang.ForEach;
import xtext.factoryLang.factoryLang.GlobalVariable;
import xtext.factoryLang.factoryLang.LocalVariable;
import xtext.factoryLang.factoryLang.Model;
import xtext.factoryLang.factoryLang.VariableConditional;
import xtext.factoryLang.factoryLang.VariableValue;
import xtext.factoryLang.services.FactoryLangGrammarAccess;

@SuppressWarnings("all")
public class FactoryLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FactoryLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FactoryLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FactoryLangPackage.CAMERA:
				sequence_Camera(context, (Camera) semanticObject); 
				return; 
			case FactoryLangPackage.CAMERA_COLOR_PARAMETER:
				sequence_CameraColorParameter(context, (CameraColorParameter) semanticObject); 
				return; 
			case FactoryLangPackage.CAMERA_SCAN_OPERATION:
				sequence_CameraScanOperation(context, (CameraScanOperation) semanticObject); 
				return; 
			case FactoryLangPackage.COLOR_VALUE:
				sequence_ColorValue(context, (ColorValue) semanticObject); 
				return; 
			case FactoryLangPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case FactoryLangPackage.CRANE:
				sequence_Crane(context, (Crane) semanticObject); 
				return; 
			case FactoryLangPackage.CRANE_DROP_OPERATION:
				sequence_CraneDropOperation(context, (CraneDropOperation) semanticObject); 
				return; 
			case FactoryLangPackage.CRANE_PICKUP_OPERATION:
				sequence_CranePickupOperation(context, (CranePickupOperation) semanticObject); 
				return; 
			case FactoryLangPackage.CRANE_POSITION_PARAMETER:
				sequence_CranePositionParameter(context, (CranePositionParameter) semanticObject); 
				return; 
			case FactoryLangPackage.DEVICE_CONDITIONAL:
				sequence_DeviceConditional(context, (DeviceConditional) semanticObject); 
				return; 
			case FactoryLangPackage.DEVICE_VALUE:
				sequence_DeviceValue(context, (DeviceValue) semanticObject); 
				return; 
			case FactoryLangPackage.DISK:
				sequence_Disk(context, (Disk) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_MARK_SLOT_OPERATION:
				sequence_DiskMarkSlotOperation(context, (DiskMarkSlotOperation) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_MOVE_EMPTY_SLOT_OPERATION:
				sequence_DiskMoveEmptySlotOperation(context, (DiskMoveEmptySlotOperation) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_MOVE_SLOT_OPERATION:
				sequence_DiskMoveSlotOperation(context, (DiskMoveSlotOperation) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_MOVE_VARIABLE_SLOT_OPERATION:
				sequence_DiskMoveVariableSlotOperation(context, (DiskMoveVariableSlotOperation) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_SLOT_PARAMETER:
				sequence_DiskSlotParameter(context, (DiskSlotParameter) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_SLOT_STATE_VALUE:
				sequence_DiskSlotStateValue(context, (DiskSlotStateValue) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_SLOT_VALUE:
				sequence_DiskSlotValue(context, (DiskSlotValue) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_STATE_VALUE:
				sequence_DiskStateValue(context, (DiskStateValue) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_WAIT_OPERATION:
				sequence_DiskWaitOperation(context, (DiskWaitOperation) semanticObject); 
				return; 
			case FactoryLangPackage.DISK_ZONE_PARAMETER:
				sequence_DiskZoneParameter(context, (DiskZoneParameter) semanticObject); 
				return; 
			case FactoryLangPackage.FOR_EACH:
				sequence_ForEach(context, (ForEach) semanticObject); 
				return; 
			case FactoryLangPackage.GLOBAL_VARIABLE:
				sequence_GlobalVariable(context, (GlobalVariable) semanticObject); 
				return; 
			case FactoryLangPackage.LOCAL_VARIABLE:
				sequence_LocalVariable(context, (LocalVariable) semanticObject); 
				return; 
			case FactoryLangPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case FactoryLangPackage.NUMBER:
				sequence_Number(context, (xtext.factoryLang.factoryLang.Number) semanticObject); 
				return; 
			case FactoryLangPackage.VARIABLE_CONDITIONAL:
				sequence_VariableConditional(context, (VariableConditional) semanticObject); 
				return; 
			case FactoryLangPackage.VARIABLE_VALUE:
				sequence_VariableValue(context, (VariableValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CameraParameter returns CameraColorParameter
	 *     CameraColorParameter returns CameraColorParameter
	 *
	 * Constraint:
	 *     color=COLOR
	 * </pre>
	 */
	protected void sequence_CameraColorParameter(ISerializationContext context, CameraColorParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CAMERA_COLOR_PARAMETER__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CAMERA_COLOR_PARAMETER__COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCameraColorParameterAccess().getColorCOLOREnumRuleCall_4_0(), semanticObject.getColor());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns CameraScanOperation
	 *     Operation returns CameraScanOperation
	 *     CameraOperation returns CameraScanOperation
	 *     CameraScanOperation returns CameraScanOperation
	 *
	 * Constraint:
	 *     (device=[Camera|ID] variable=GlobalVariable)
	 * </pre>
	 */
	protected void sequence_CameraScanOperation(ISerializationContext context, CameraScanOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CAMERA_SCAN_OPERATION__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CAMERA_SCAN_OPERATION__DEVICE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CAMERA_SCAN_OPERATION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CAMERA_SCAN_OPERATION__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCameraScanOperationAccess().getDeviceCameraIDTerminalRuleCall_1_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.CAMERA_SCAN_OPERATION__DEVICE, false));
		feeder.accept(grammarAccess.getCameraScanOperationAccess().getVariableGlobalVariableParserRuleCall_5_0(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Device returns Camera
	 *     Camera returns Camera
	 *
	 * Constraint:
	 *     (name=ID targets+=CameraParameter+)
	 * </pre>
	 */
	protected void sequence_Camera(ISerializationContext context, Camera semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ColorValue returns ColorValue
	 *
	 * Constraint:
	 *     value=COLOR
	 * </pre>
	 */
	protected void sequence_ColorValue(ISerializationContext context, ColorValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.COLOR_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.COLOR_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColorValueAccess().getValueCOLOREnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     device=Device
	 * </pre>
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CONFIGURATION__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CONFIGURATION__DEVICE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAccess().getDeviceDeviceParserRuleCall_1_0(), semanticObject.getDevice());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns CraneDropOperation
	 *     Operation returns CraneDropOperation
	 *     CraneOperation returns CraneDropOperation
	 *     CraneDropOperation returns CraneDropOperation
	 *
	 * Constraint:
	 *     (device=[Crane|ID] target=[CraneParameter|ID])
	 * </pre>
	 */
	protected void sequence_CraneDropOperation(ISerializationContext context, CraneDropOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CRANE_OPERATION__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CRANE_OPERATION__DEVICE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CRANE_OPERATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CRANE_OPERATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCraneDropOperationAccess().getDeviceCraneIDTerminalRuleCall_1_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.CRANE_OPERATION__DEVICE, false));
		feeder.accept(grammarAccess.getCraneDropOperationAccess().getTargetCraneParameterIDTerminalRuleCall_5_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.CRANE_OPERATION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns CranePickupOperation
	 *     Operation returns CranePickupOperation
	 *     CraneOperation returns CranePickupOperation
	 *     CranePickupOperation returns CranePickupOperation
	 *
	 * Constraint:
	 *     (device=[Crane|ID] target=[CraneParameter|ID])
	 * </pre>
	 */
	protected void sequence_CranePickupOperation(ISerializationContext context, CranePickupOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CRANE_OPERATION__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CRANE_OPERATION__DEVICE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CRANE_OPERATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CRANE_OPERATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCranePickupOperationAccess().getDeviceCraneIDTerminalRuleCall_1_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.CRANE_OPERATION__DEVICE, false));
		feeder.accept(grammarAccess.getCranePickupOperationAccess().getTargetCraneParameterIDTerminalRuleCall_5_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.CRANE_OPERATION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CraneParameter returns CranePositionParameter
	 *     CranePositionParameter returns CranePositionParameter
	 *
	 * Constraint:
	 *     (degree=INT name=ID)
	 * </pre>
	 */
	protected void sequence_CranePositionParameter(ISerializationContext context, CranePositionParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CRANE_POSITION_PARAMETER__DEGREE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CRANE_POSITION_PARAMETER__DEGREE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.CRANE_POSITION_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.CRANE_POSITION_PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCranePositionParameterAccess().getDegreeINTTerminalRuleCall_4_0(), semanticObject.getDegree());
		feeder.accept(grammarAccess.getCranePositionParameterAccess().getNameIDTerminalRuleCall_6_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Device returns Crane
	 *     Crane returns Crane
	 *
	 * Constraint:
	 *     (name=ID targets+=CraneParameter+)
	 * </pre>
	 */
	protected void sequence_Crane(ISerializationContext context, Crane semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns DeviceConditional
	 *     Conditional returns DeviceConditional
	 *     DeviceConditional returns DeviceConditional
	 *
	 * Constraint:
	 *     (device=[Device|ID] not_operator='not'? deviceValue=DeviceValue statements+=Statement*)
	 * </pre>
	 */
	protected void sequence_DeviceConditional(ISerializationContext context, DeviceConditional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeviceValue returns DeviceValue
	 *
	 * Constraint:
	 *     (value=DiskStateValue | value=ColorValue | ref=[Parameter|ID])
	 * </pre>
	 */
	protected void sequence_DeviceValue(ISerializationContext context, DeviceValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns DiskMarkSlotOperation
	 *     Operation returns DiskMarkSlotOperation
	 *     DiskOperation returns DiskMarkSlotOperation
	 *     DiskMarkSlotOperation returns DiskMarkSlotOperation
	 *
	 * Constraint:
	 *     (device=[Disk|ID] target=[DiskZoneParameter|ID] diskSlotValue=DiskSlotValue (quantity=INT measure=TIME)?)
	 * </pre>
	 */
	protected void sequence_DiskMarkSlotOperation(ISerializationContext context, DiskMarkSlotOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns DiskMoveEmptySlotOperation
	 *     Operation returns DiskMoveEmptySlotOperation
	 *     DiskOperation returns DiskMoveEmptySlotOperation
	 *     DiskMoveEmptySlotOperation returns DiskMoveEmptySlotOperation
	 *
	 * Constraint:
	 *     (device=[Disk|ID] target=[DiskZoneParameter|ID])
	 * </pre>
	 */
	protected void sequence_DiskMoveEmptySlotOperation(ISerializationContext context, DiskMoveEmptySlotOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_OPERATION__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_OPERATION__DEVICE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_EMPTY_SLOT_OPERATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_EMPTY_SLOT_OPERATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskMoveEmptySlotOperationAccess().getDeviceDiskIDTerminalRuleCall_1_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_OPERATION__DEVICE, false));
		feeder.accept(grammarAccess.getDiskMoveEmptySlotOperationAccess().getTargetDiskZoneParameterIDTerminalRuleCall_6_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_MOVE_EMPTY_SLOT_OPERATION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns DiskMoveSlotOperation
	 *     Operation returns DiskMoveSlotOperation
	 *     DiskOperation returns DiskMoveSlotOperation
	 *     DiskMoveSlotOperation returns DiskMoveSlotOperation
	 *
	 * Constraint:
	 *     (device=[Disk|ID] source=[DiskZoneParameter|ID] target=[DiskZoneParameter|ID])
	 * </pre>
	 */
	protected void sequence_DiskMoveSlotOperation(ISerializationContext context, DiskMoveSlotOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_OPERATION__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_OPERATION__DEVICE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_SLOT_OPERATION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_SLOT_OPERATION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_SLOT_OPERATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_SLOT_OPERATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskMoveSlotOperationAccess().getDeviceDiskIDTerminalRuleCall_1_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_OPERATION__DEVICE, false));
		feeder.accept(grammarAccess.getDiskMoveSlotOperationAccess().getSourceDiskZoneParameterIDTerminalRuleCall_5_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_MOVE_SLOT_OPERATION__SOURCE, false));
		feeder.accept(grammarAccess.getDiskMoveSlotOperationAccess().getTargetDiskZoneParameterIDTerminalRuleCall_7_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_MOVE_SLOT_OPERATION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns DiskMoveVariableSlotOperation
	 *     Operation returns DiskMoveVariableSlotOperation
	 *     DiskOperation returns DiskMoveVariableSlotOperation
	 *     DiskMoveVariableSlotOperation returns DiskMoveVariableSlotOperation
	 *
	 * Constraint:
	 *     (device=[Disk|ID] variable=[Variable|ID] target=[DiskZoneParameter|ID])
	 * </pre>
	 */
	protected void sequence_DiskMoveVariableSlotOperation(ISerializationContext context, DiskMoveVariableSlotOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_OPERATION__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_OPERATION__DEVICE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_VARIABLE_SLOT_OPERATION__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_VARIABLE_SLOT_OPERATION__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_VARIABLE_SLOT_OPERATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_MOVE_VARIABLE_SLOT_OPERATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskMoveVariableSlotOperationAccess().getDeviceDiskIDTerminalRuleCall_1_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_OPERATION__DEVICE, false));
		feeder.accept(grammarAccess.getDiskMoveVariableSlotOperationAccess().getVariableVariableIDTerminalRuleCall_5_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_MOVE_VARIABLE_SLOT_OPERATION__VARIABLE, false));
		feeder.accept(grammarAccess.getDiskMoveVariableSlotOperationAccess().getTargetDiskZoneParameterIDTerminalRuleCall_7_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_MOVE_VARIABLE_SLOT_OPERATION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DiskSlotParameter returns DiskSlotParameter
	 *
	 * Constraint:
	 *     size=INT
	 * </pre>
	 */
	protected void sequence_DiskSlotParameter(ISerializationContext context, DiskSlotParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_SLOT_PARAMETER__SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_SLOT_PARAMETER__SIZE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskSlotParameterAccess().getSizeINTTerminalRuleCall_2_0(), semanticObject.getSize());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DiskSlotStateValue returns DiskSlotStateValue
	 *
	 * Constraint:
	 *     value=DISK_SLOT_STATES
	 * </pre>
	 */
	protected void sequence_DiskSlotStateValue(ISerializationContext context, DiskSlotStateValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_SLOT_STATE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_SLOT_STATE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskSlotStateValueAccess().getValueDISK_SLOT_STATESEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DiskSlotValue returns DiskSlotValue
	 *
	 * Constraint:
	 *     (value=DiskSlotStateValue | value=ColorValue | ref=[Variable|ID])
	 * </pre>
	 */
	protected void sequence_DiskSlotValue(ISerializationContext context, DiskSlotValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DiskStateValue returns DiskStateValue
	 *
	 * Constraint:
	 *     value=DISK_STATES
	 * </pre>
	 */
	protected void sequence_DiskStateValue(ISerializationContext context, DiskStateValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_STATE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_STATE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskStateValueAccess().getValueDISK_STATESEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns DiskWaitOperation
	 *     Operation returns DiskWaitOperation
	 *     DiskOperation returns DiskWaitOperation
	 *     DiskWaitOperation returns DiskWaitOperation
	 *
	 * Constraint:
	 *     device=[Disk|ID]
	 * </pre>
	 */
	protected void sequence_DiskWaitOperation(ISerializationContext context, DiskWaitOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_OPERATION__DEVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_OPERATION__DEVICE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskWaitOperationAccess().getDeviceDiskIDTerminalRuleCall_1_0_1(), semanticObject.eGet(FactoryLangPackage.Literals.DISK_OPERATION__DEVICE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DiskParameter returns DiskZoneParameter
	 *     DiskZoneParameter returns DiskZoneParameter
	 *
	 * Constraint:
	 *     (name=ID slot=INT)
	 * </pre>
	 */
	protected void sequence_DiskZoneParameter(ISerializationContext context, DiskZoneParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_ZONE_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_ZONE_PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.DISK_ZONE_PARAMETER__SLOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.DISK_ZONE_PARAMETER__SLOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiskZoneParameterAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDiskZoneParameterAccess().getSlotINTTerminalRuleCall_7_0(), semanticObject.getSlot());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Device returns Disk
	 *     Disk returns Disk
	 *
	 * Constraint:
	 *     (name=ID slotParameter=DiskSlotParameter targets+=DiskParameter+)
	 * </pre>
	 */
	protected void sequence_Disk(ISerializationContext context, Disk semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ForEach
	 *     Loop returns ForEach
	 *     ForEach returns ForEach
	 *
	 * Constraint:
	 *     (variable=LocalVariable device=[Device|ID] operator='not'? variableValue=VariableValue statements+=Statement*)
	 * </pre>
	 */
	protected void sequence_ForEach(ISerializationContext context, ForEach semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GlobalVariable returns GlobalVariable
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_GlobalVariable(ISerializationContext context, GlobalVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGlobalVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LocalVariable returns LocalVariable
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_LocalVariable(ISerializationContext context, LocalVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (configurations+=Configuration+ statements+=Statement+)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Number returns Number
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_Number(ISerializationContext context, xtext.factoryLang.factoryLang.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryLangPackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryLangPackage.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns VariableConditional
	 *     Conditional returns VariableConditional
	 *     VariableConditional returns VariableConditional
	 *
	 * Constraint:
	 *     (variable=[Variable|ID] comparison_operator=COMPARISON_OPERATOR? variableValue=VariableValue statements+=Statement*)
	 * </pre>
	 */
	protected void sequence_VariableConditional(ISerializationContext context, VariableConditional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableValue returns VariableValue
	 *
	 * Constraint:
	 *     (value=DiskSlotStateValue | value=ColorValue | value=Number | value=DiskStateValue | ref=[Variable|ID])
	 * </pre>
	 */
	protected void sequence_VariableValue(ISerializationContext context, VariableValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
