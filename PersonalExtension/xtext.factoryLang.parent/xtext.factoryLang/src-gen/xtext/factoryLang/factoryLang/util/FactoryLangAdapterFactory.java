/**
 * generated by Xtext 2.26.0
 */
package xtext.factoryLang.factoryLang.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xtext.factoryLang.factoryLang.Camera;
import xtext.factoryLang.factoryLang.CameraColorParameter;
import xtext.factoryLang.factoryLang.CameraOperation;
import xtext.factoryLang.factoryLang.CameraParameter;
import xtext.factoryLang.factoryLang.CameraScanOperation;
import xtext.factoryLang.factoryLang.ColorValue;
import xtext.factoryLang.factoryLang.Conditional;
import xtext.factoryLang.factoryLang.Configuration;
import xtext.factoryLang.factoryLang.Crane;
import xtext.factoryLang.factoryLang.CraneDropOperation;
import xtext.factoryLang.factoryLang.CraneOperation;
import xtext.factoryLang.factoryLang.CraneParameter;
import xtext.factoryLang.factoryLang.CranePickupOperation;
import xtext.factoryLang.factoryLang.CranePositionParameter;
import xtext.factoryLang.factoryLang.Device;
import xtext.factoryLang.factoryLang.DeviceConditional;
import xtext.factoryLang.factoryLang.DeviceValue;
import xtext.factoryLang.factoryLang.Disk;
import xtext.factoryLang.factoryLang.DiskMarkSlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveEmptySlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveSlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveVariableSlotOperation;
import xtext.factoryLang.factoryLang.DiskOperation;
import xtext.factoryLang.factoryLang.DiskParameter;
import xtext.factoryLang.factoryLang.DiskSlotParameter;
import xtext.factoryLang.factoryLang.DiskSlotStateValue;
import xtext.factoryLang.factoryLang.DiskSlotValue;
import xtext.factoryLang.factoryLang.DiskStateValue;
import xtext.factoryLang.factoryLang.DiskWaitOperation;
import xtext.factoryLang.factoryLang.DiskZoneParameter;
import xtext.factoryLang.factoryLang.FactoryLangPackage;
import xtext.factoryLang.factoryLang.ForEach;
import xtext.factoryLang.factoryLang.GlobalVariable;
import xtext.factoryLang.factoryLang.LocalVariable;
import xtext.factoryLang.factoryLang.Loop;
import xtext.factoryLang.factoryLang.Model;
import xtext.factoryLang.factoryLang.Operation;
import xtext.factoryLang.factoryLang.Parameter;
import xtext.factoryLang.factoryLang.Statement;
import xtext.factoryLang.factoryLang.Variable;
import xtext.factoryLang.factoryLang.VariableConditional;
import xtext.factoryLang.factoryLang.VariableValue;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xtext.factoryLang.factoryLang.FactoryLangPackage
 * @generated
 */
public class FactoryLangAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FactoryLangPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FactoryLangAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FactoryLangPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FactoryLangSwitch<Adapter> modelSwitch =
    new FactoryLangSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseConfiguration(Configuration object)
      {
        return createConfigurationAdapter();
      }
      @Override
      public Adapter caseDevice(Device object)
      {
        return createDeviceAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseCraneParameter(CraneParameter object)
      {
        return createCraneParameterAdapter();
      }
      @Override
      public Adapter caseDiskParameter(DiskParameter object)
      {
        return createDiskParameterAdapter();
      }
      @Override
      public Adapter caseCameraParameter(CameraParameter object)
      {
        return createCameraParameterAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseConditional(Conditional object)
      {
        return createConditionalAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseCraneOperation(CraneOperation object)
      {
        return createCraneOperationAdapter();
      }
      @Override
      public Adapter caseDiskOperation(DiskOperation object)
      {
        return createDiskOperationAdapter();
      }
      @Override
      public Adapter caseCameraOperation(CameraOperation object)
      {
        return createCameraOperationAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseDeviceValue(DeviceValue object)
      {
        return createDeviceValueAdapter();
      }
      @Override
      public Adapter caseDiskSlotValue(DiskSlotValue object)
      {
        return createDiskSlotValueAdapter();
      }
      @Override
      public Adapter caseVariableValue(VariableValue object)
      {
        return createVariableValueAdapter();
      }
      @Override
      public Adapter caseDiskStateValue(DiskStateValue object)
      {
        return createDiskStateValueAdapter();
      }
      @Override
      public Adapter caseDiskSlotStateValue(DiskSlotStateValue object)
      {
        return createDiskSlotStateValueAdapter();
      }
      @Override
      public Adapter caseColorValue(ColorValue object)
      {
        return createColorValueAdapter();
      }
      @Override
      public Adapter caseNumber(xtext.factoryLang.factoryLang.Number object)
      {
        return createNumberAdapter();
      }
      @Override
      public Adapter caseCrane(Crane object)
      {
        return createCraneAdapter();
      }
      @Override
      public Adapter caseCranePositionParameter(CranePositionParameter object)
      {
        return createCranePositionParameterAdapter();
      }
      @Override
      public Adapter caseDisk(Disk object)
      {
        return createDiskAdapter();
      }
      @Override
      public Adapter caseDiskSlotParameter(DiskSlotParameter object)
      {
        return createDiskSlotParameterAdapter();
      }
      @Override
      public Adapter caseDiskZoneParameter(DiskZoneParameter object)
      {
        return createDiskZoneParameterAdapter();
      }
      @Override
      public Adapter caseCamera(Camera object)
      {
        return createCameraAdapter();
      }
      @Override
      public Adapter caseCameraColorParameter(CameraColorParameter object)
      {
        return createCameraColorParameterAdapter();
      }
      @Override
      public Adapter caseDeviceConditional(DeviceConditional object)
      {
        return createDeviceConditionalAdapter();
      }
      @Override
      public Adapter caseVariableConditional(VariableConditional object)
      {
        return createVariableConditionalAdapter();
      }
      @Override
      public Adapter caseCranePickupOperation(CranePickupOperation object)
      {
        return createCranePickupOperationAdapter();
      }
      @Override
      public Adapter caseCraneDropOperation(CraneDropOperation object)
      {
        return createCraneDropOperationAdapter();
      }
      @Override
      public Adapter caseDiskMoveSlotOperation(DiskMoveSlotOperation object)
      {
        return createDiskMoveSlotOperationAdapter();
      }
      @Override
      public Adapter caseDiskMoveVariableSlotOperation(DiskMoveVariableSlotOperation object)
      {
        return createDiskMoveVariableSlotOperationAdapter();
      }
      @Override
      public Adapter caseDiskMoveEmptySlotOperation(DiskMoveEmptySlotOperation object)
      {
        return createDiskMoveEmptySlotOperationAdapter();
      }
      @Override
      public Adapter caseDiskMarkSlotOperation(DiskMarkSlotOperation object)
      {
        return createDiskMarkSlotOperationAdapter();
      }
      @Override
      public Adapter caseDiskWaitOperation(DiskWaitOperation object)
      {
        return createDiskWaitOperationAdapter();
      }
      @Override
      public Adapter caseCameraScanOperation(CameraScanOperation object)
      {
        return createCameraScanOperationAdapter();
      }
      @Override
      public Adapter caseForEach(ForEach object)
      {
        return createForEachAdapter();
      }
      @Override
      public Adapter caseLocalVariable(LocalVariable object)
      {
        return createLocalVariableAdapter();
      }
      @Override
      public Adapter caseGlobalVariable(GlobalVariable object)
      {
        return createGlobalVariableAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Configuration <em>Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Configuration
   * @generated
   */
  public Adapter createConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Device <em>Device</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Device
   * @generated
   */
  public Adapter createDeviceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CraneParameter <em>Crane Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CraneParameter
   * @generated
   */
  public Adapter createCraneParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskParameter <em>Disk Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskParameter
   * @generated
   */
  public Adapter createDiskParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CameraParameter <em>Camera Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CameraParameter
   * @generated
   */
  public Adapter createCameraParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Conditional <em>Conditional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Conditional
   * @generated
   */
  public Adapter createConditionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CraneOperation <em>Crane Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CraneOperation
   * @generated
   */
  public Adapter createCraneOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskOperation <em>Disk Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskOperation
   * @generated
   */
  public Adapter createDiskOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CameraOperation <em>Camera Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CameraOperation
   * @generated
   */
  public Adapter createCameraOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DeviceValue <em>Device Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DeviceValue
   * @generated
   */
  public Adapter createDeviceValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskSlotValue <em>Disk Slot Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskSlotValue
   * @generated
   */
  public Adapter createDiskSlotValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.VariableValue <em>Variable Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.VariableValue
   * @generated
   */
  public Adapter createVariableValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskStateValue <em>Disk State Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskStateValue
   * @generated
   */
  public Adapter createDiskStateValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskSlotStateValue <em>Disk Slot State Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskSlotStateValue
   * @generated
   */
  public Adapter createDiskSlotStateValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.ColorValue <em>Color Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.ColorValue
   * @generated
   */
  public Adapter createColorValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Number <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Number
   * @generated
   */
  public Adapter createNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Crane <em>Crane</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Crane
   * @generated
   */
  public Adapter createCraneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CranePositionParameter <em>Crane Position Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CranePositionParameter
   * @generated
   */
  public Adapter createCranePositionParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Disk <em>Disk</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Disk
   * @generated
   */
  public Adapter createDiskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskSlotParameter <em>Disk Slot Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskSlotParameter
   * @generated
   */
  public Adapter createDiskSlotParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskZoneParameter <em>Disk Zone Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskZoneParameter
   * @generated
   */
  public Adapter createDiskZoneParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.Camera <em>Camera</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.Camera
   * @generated
   */
  public Adapter createCameraAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CameraColorParameter <em>Camera Color Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CameraColorParameter
   * @generated
   */
  public Adapter createCameraColorParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DeviceConditional <em>Device Conditional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DeviceConditional
   * @generated
   */
  public Adapter createDeviceConditionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.VariableConditional <em>Variable Conditional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.VariableConditional
   * @generated
   */
  public Adapter createVariableConditionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CranePickupOperation <em>Crane Pickup Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CranePickupOperation
   * @generated
   */
  public Adapter createCranePickupOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CraneDropOperation <em>Crane Drop Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CraneDropOperation
   * @generated
   */
  public Adapter createCraneDropOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskMoveSlotOperation <em>Disk Move Slot Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskMoveSlotOperation
   * @generated
   */
  public Adapter createDiskMoveSlotOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskMoveVariableSlotOperation <em>Disk Move Variable Slot Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskMoveVariableSlotOperation
   * @generated
   */
  public Adapter createDiskMoveVariableSlotOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskMoveEmptySlotOperation <em>Disk Move Empty Slot Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskMoveEmptySlotOperation
   * @generated
   */
  public Adapter createDiskMoveEmptySlotOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskMarkSlotOperation <em>Disk Mark Slot Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskMarkSlotOperation
   * @generated
   */
  public Adapter createDiskMarkSlotOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.DiskWaitOperation <em>Disk Wait Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.DiskWaitOperation
   * @generated
   */
  public Adapter createDiskWaitOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.CameraScanOperation <em>Camera Scan Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.CameraScanOperation
   * @generated
   */
  public Adapter createCameraScanOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.ForEach <em>For Each</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.ForEach
   * @generated
   */
  public Adapter createForEachAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.LocalVariable <em>Local Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.LocalVariable
   * @generated
   */
  public Adapter createLocalVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLang.factoryLang.GlobalVariable <em>Global Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLang.factoryLang.GlobalVariable
   * @generated
   */
  public Adapter createGlobalVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FactoryLangAdapterFactory
