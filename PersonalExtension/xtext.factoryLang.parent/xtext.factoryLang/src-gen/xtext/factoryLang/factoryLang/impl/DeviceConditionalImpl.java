/**
 * generated by Xtext 2.26.0
 */
package xtext.factoryLang.factoryLang.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.factoryLang.factoryLang.Device;
import xtext.factoryLang.factoryLang.DeviceConditional;
import xtext.factoryLang.factoryLang.DeviceValue;
import xtext.factoryLang.factoryLang.FactoryLangPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Device Conditional</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.DeviceConditionalImpl#getDevice <em>Device</em>}</li>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.DeviceConditionalImpl#getNot_operator <em>Not operator</em>}</li>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.DeviceConditionalImpl#getDeviceValue <em>Device Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeviceConditionalImpl extends ConditionalImpl implements DeviceConditional
{
  /**
   * The cached value of the '{@link #getDevice() <em>Device</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDevice()
   * @generated
   * @ordered
   */
  protected Device device;

  /**
   * The default value of the '{@link #getNot_operator() <em>Not operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNot_operator()
   * @generated
   * @ordered
   */
  protected static final String NOT_OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNot_operator() <em>Not operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNot_operator()
   * @generated
   * @ordered
   */
  protected String not_operator = NOT_OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getDeviceValue() <em>Device Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeviceValue()
   * @generated
   * @ordered
   */
  protected DeviceValue deviceValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeviceConditionalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FactoryLangPackage.Literals.DEVICE_CONDITIONAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Device getDevice()
  {
    if (device != null && device.eIsProxy())
    {
      InternalEObject oldDevice = (InternalEObject)device;
      device = (Device)eResolveProxy(oldDevice);
      if (device != oldDevice)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE, oldDevice, device));
      }
    }
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Device basicGetDevice()
  {
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDevice(Device newDevice)
  {
    Device oldDevice = device;
    device = newDevice;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE, oldDevice, device));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNot_operator()
  {
    return not_operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNot_operator(String newNot_operator)
  {
    String oldNot_operator = not_operator;
    not_operator = newNot_operator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DEVICE_CONDITIONAL__NOT_OPERATOR, oldNot_operator, not_operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeviceValue getDeviceValue()
  {
    return deviceValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeviceValue(DeviceValue newDeviceValue, NotificationChain msgs)
  {
    DeviceValue oldDeviceValue = deviceValue;
    deviceValue = newDeviceValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE, oldDeviceValue, newDeviceValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeviceValue(DeviceValue newDeviceValue)
  {
    if (newDeviceValue != deviceValue)
    {
      NotificationChain msgs = null;
      if (deviceValue != null)
        msgs = ((InternalEObject)deviceValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE, null, msgs);
      if (newDeviceValue != null)
        msgs = ((InternalEObject)newDeviceValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE, null, msgs);
      msgs = basicSetDeviceValue(newDeviceValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE, newDeviceValue, newDeviceValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE:
        return basicSetDeviceValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE:
        if (resolve) return getDevice();
        return basicGetDevice();
      case FactoryLangPackage.DEVICE_CONDITIONAL__NOT_OPERATOR:
        return getNot_operator();
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE:
        return getDeviceValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE:
        setDevice((Device)newValue);
        return;
      case FactoryLangPackage.DEVICE_CONDITIONAL__NOT_OPERATOR:
        setNot_operator((String)newValue);
        return;
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE:
        setDeviceValue((DeviceValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE:
        setDevice((Device)null);
        return;
      case FactoryLangPackage.DEVICE_CONDITIONAL__NOT_OPERATOR:
        setNot_operator(NOT_OPERATOR_EDEFAULT);
        return;
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE:
        setDeviceValue((DeviceValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE:
        return device != null;
      case FactoryLangPackage.DEVICE_CONDITIONAL__NOT_OPERATOR:
        return NOT_OPERATOR_EDEFAULT == null ? not_operator != null : !NOT_OPERATOR_EDEFAULT.equals(not_operator);
      case FactoryLangPackage.DEVICE_CONDITIONAL__DEVICE_VALUE:
        return deviceValue != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (not_operator: ");
    result.append(not_operator);
    result.append(')');
    return result.toString();
  }

} //DeviceConditionalImpl
