/**
 * generated by Xtext 2.26.0
 */
package xtext.factoryLang.factoryLang.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import xtext.factoryLang.factoryLang.Camera;
import xtext.factoryLang.factoryLang.CameraColorParameter;
import xtext.factoryLang.factoryLang.CameraOperation;
import xtext.factoryLang.factoryLang.CameraParameter;
import xtext.factoryLang.factoryLang.CameraScanOperation;
import xtext.factoryLang.factoryLang.ColorValue;
import xtext.factoryLang.factoryLang.Conditional;
import xtext.factoryLang.factoryLang.Configuration;
import xtext.factoryLang.factoryLang.Crane;
import xtext.factoryLang.factoryLang.CraneDropOperation;
import xtext.factoryLang.factoryLang.CraneOperation;
import xtext.factoryLang.factoryLang.CraneParameter;
import xtext.factoryLang.factoryLang.CranePickupOperation;
import xtext.factoryLang.factoryLang.CranePositionParameter;
import xtext.factoryLang.factoryLang.Device;
import xtext.factoryLang.factoryLang.DeviceConditional;
import xtext.factoryLang.factoryLang.DeviceValue;
import xtext.factoryLang.factoryLang.Disk;
import xtext.factoryLang.factoryLang.DiskMarkSlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveEmptySlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveSlotOperation;
import xtext.factoryLang.factoryLang.DiskMoveVariableSlotOperation;
import xtext.factoryLang.factoryLang.DiskOperation;
import xtext.factoryLang.factoryLang.DiskParameter;
import xtext.factoryLang.factoryLang.DiskSlotParameter;
import xtext.factoryLang.factoryLang.DiskSlotStateValue;
import xtext.factoryLang.factoryLang.DiskSlotValue;
import xtext.factoryLang.factoryLang.DiskStateValue;
import xtext.factoryLang.factoryLang.DiskWaitOperation;
import xtext.factoryLang.factoryLang.DiskZoneParameter;
import xtext.factoryLang.factoryLang.FactoryLangFactory;
import xtext.factoryLang.factoryLang.FactoryLangPackage;
import xtext.factoryLang.factoryLang.ForEach;
import xtext.factoryLang.factoryLang.GlobalVariable;
import xtext.factoryLang.factoryLang.LocalVariable;
import xtext.factoryLang.factoryLang.Loop;
import xtext.factoryLang.factoryLang.Model;
import xtext.factoryLang.factoryLang.Operation;
import xtext.factoryLang.factoryLang.Parameter;
import xtext.factoryLang.factoryLang.Statement;
import xtext.factoryLang.factoryLang.Variable;
import xtext.factoryLang.factoryLang.VariableConditional;
import xtext.factoryLang.factoryLang.VariableValue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FactoryLangPackageImpl extends EPackageImpl implements FactoryLangPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configurationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deviceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loopEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deviceValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskSlotValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskStateValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskSlotStateValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colorValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numberEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cranePositionParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskSlotParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskZoneParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraColorParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deviceConditionalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableConditionalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cranePickupOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneDropOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskMoveSlotOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskMoveVariableSlotOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskMoveEmptySlotOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskMarkSlotOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diskWaitOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraScanOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forEachEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass localVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass globalVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum comparisoN_OPERATOREEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum colorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum disK_SLOT_STATESEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum disK_STATESEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum timeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see xtext.factoryLang.factoryLang.FactoryLangPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private FactoryLangPackageImpl()
  {
    super(eNS_URI, FactoryLangFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link FactoryLangPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static FactoryLangPackage init()
  {
    if (isInited) return (FactoryLangPackage)EPackage.Registry.INSTANCE.getEPackage(FactoryLangPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredFactoryLangPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    FactoryLangPackageImpl theFactoryLangPackage = registeredFactoryLangPackage instanceof FactoryLangPackageImpl ? (FactoryLangPackageImpl)registeredFactoryLangPackage : new FactoryLangPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theFactoryLangPackage.createPackageContents();

    // Initialize created meta-data
    theFactoryLangPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theFactoryLangPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(FactoryLangPackage.eNS_URI, theFactoryLangPackage);
    return theFactoryLangPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Configurations()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Statements()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfiguration()
  {
    return configurationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfiguration_Device()
  {
    return (EReference)configurationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDevice()
  {
    return deviceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDevice_Name()
  {
    return (EAttribute)deviceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDevice_Targets()
  {
    return (EReference)deviceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParameter()
  {
    return parameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneParameter()
  {
    return craneParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskParameter()
  {
    return diskParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCameraParameter()
  {
    return cameraParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditional()
  {
    return conditionalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditional_Statements()
  {
    return (EReference)conditionalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperation()
  {
    return operationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneOperation()
  {
    return craneOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCraneOperation_Device()
  {
    return (EReference)craneOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCraneOperation_Target()
  {
    return (EReference)craneOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskOperation()
  {
    return diskOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskOperation_Device()
  {
    return (EReference)diskOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCameraOperation()
  {
    return cameraOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLoop()
  {
    return loopEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariable()
  {
    return variableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariable_Name()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeviceValue()
  {
    return deviceValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeviceValue_Value()
  {
    return (EReference)deviceValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeviceValue_Ref()
  {
    return (EReference)deviceValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskSlotValue()
  {
    return diskSlotValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskSlotValue_Value()
  {
    return (EReference)diskSlotValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskSlotValue_Ref()
  {
    return (EReference)diskSlotValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableValue()
  {
    return variableValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableValue_Value()
  {
    return (EReference)variableValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableValue_Ref()
  {
    return (EReference)variableValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskStateValue()
  {
    return diskStateValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskStateValue_Value()
  {
    return (EAttribute)diskStateValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskSlotStateValue()
  {
    return diskSlotStateValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskSlotStateValue_Value()
  {
    return (EAttribute)diskSlotStateValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColorValue()
  {
    return colorValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColorValue_Value()
  {
    return (EAttribute)colorValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNumber()
  {
    return numberEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNumber_Value()
  {
    return (EAttribute)numberEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCrane()
  {
    return craneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCranePositionParameter()
  {
    return cranePositionParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCranePositionParameter_Degree()
  {
    return (EAttribute)cranePositionParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCranePositionParameter_Name()
  {
    return (EAttribute)cranePositionParameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDisk()
  {
    return diskEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDisk_SlotParameter()
  {
    return (EReference)diskEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskSlotParameter()
  {
    return diskSlotParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskSlotParameter_Size()
  {
    return (EAttribute)diskSlotParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskZoneParameter()
  {
    return diskZoneParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskZoneParameter_Name()
  {
    return (EAttribute)diskZoneParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskZoneParameter_Slot()
  {
    return (EAttribute)diskZoneParameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCamera()
  {
    return cameraEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCameraColorParameter()
  {
    return cameraColorParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCameraColorParameter_Color()
  {
    return (EAttribute)cameraColorParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeviceConditional()
  {
    return deviceConditionalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeviceConditional_Device()
  {
    return (EReference)deviceConditionalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDeviceConditional_Not_operator()
  {
    return (EAttribute)deviceConditionalEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeviceConditional_DeviceValue()
  {
    return (EReference)deviceConditionalEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableConditional()
  {
    return variableConditionalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableConditional_Variable()
  {
    return (EReference)variableConditionalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariableConditional_Comparison_operator()
  {
    return (EAttribute)variableConditionalEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableConditional_VariableValue()
  {
    return (EReference)variableConditionalEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCranePickupOperation()
  {
    return cranePickupOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneDropOperation()
  {
    return craneDropOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskMoveSlotOperation()
  {
    return diskMoveSlotOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskMoveSlotOperation_Source()
  {
    return (EReference)diskMoveSlotOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskMoveSlotOperation_Target()
  {
    return (EReference)diskMoveSlotOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskMoveVariableSlotOperation()
  {
    return diskMoveVariableSlotOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskMoveVariableSlotOperation_Variable()
  {
    return (EReference)diskMoveVariableSlotOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskMoveVariableSlotOperation_Target()
  {
    return (EReference)diskMoveVariableSlotOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskMoveEmptySlotOperation()
  {
    return diskMoveEmptySlotOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskMoveEmptySlotOperation_Target()
  {
    return (EReference)diskMoveEmptySlotOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskMarkSlotOperation()
  {
    return diskMarkSlotOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskMarkSlotOperation_Target()
  {
    return (EReference)diskMarkSlotOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiskMarkSlotOperation_DiskSlotValue()
  {
    return (EReference)diskMarkSlotOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskMarkSlotOperation_Quantity()
  {
    return (EAttribute)diskMarkSlotOperationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiskMarkSlotOperation_Measure()
  {
    return (EAttribute)diskMarkSlotOperationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiskWaitOperation()
  {
    return diskWaitOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCameraScanOperation()
  {
    return cameraScanOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCameraScanOperation_Device()
  {
    return (EReference)cameraScanOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCameraScanOperation_Variable()
  {
    return (EReference)cameraScanOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getForEach()
  {
    return forEachEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForEach_Variable()
  {
    return (EReference)forEachEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForEach_Device()
  {
    return (EReference)forEachEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getForEach_Operator()
  {
    return (EAttribute)forEachEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForEach_VariableValue()
  {
    return (EReference)forEachEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForEach_Statements()
  {
    return (EReference)forEachEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLocalVariable()
  {
    return localVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGlobalVariable()
  {
    return globalVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCOMPARISON_OPERATOR()
  {
    return comparisoN_OPERATOREEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCOLOR()
  {
    return colorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDISK_SLOT_STATES()
  {
    return disK_SLOT_STATESEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDISK_STATES()
  {
    return disK_STATESEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getTIME()
  {
    return timeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FactoryLangFactory getFactoryLangFactory()
  {
    return (FactoryLangFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__CONFIGURATIONS);
    createEReference(modelEClass, MODEL__STATEMENTS);

    configurationEClass = createEClass(CONFIGURATION);
    createEReference(configurationEClass, CONFIGURATION__DEVICE);

    deviceEClass = createEClass(DEVICE);
    createEAttribute(deviceEClass, DEVICE__NAME);
    createEReference(deviceEClass, DEVICE__TARGETS);

    parameterEClass = createEClass(PARAMETER);

    craneParameterEClass = createEClass(CRANE_PARAMETER);

    diskParameterEClass = createEClass(DISK_PARAMETER);

    cameraParameterEClass = createEClass(CAMERA_PARAMETER);

    statementEClass = createEClass(STATEMENT);

    conditionalEClass = createEClass(CONDITIONAL);
    createEReference(conditionalEClass, CONDITIONAL__STATEMENTS);

    operationEClass = createEClass(OPERATION);

    craneOperationEClass = createEClass(CRANE_OPERATION);
    createEReference(craneOperationEClass, CRANE_OPERATION__DEVICE);
    createEReference(craneOperationEClass, CRANE_OPERATION__TARGET);

    diskOperationEClass = createEClass(DISK_OPERATION);
    createEReference(diskOperationEClass, DISK_OPERATION__DEVICE);

    cameraOperationEClass = createEClass(CAMERA_OPERATION);

    loopEClass = createEClass(LOOP);

    variableEClass = createEClass(VARIABLE);
    createEAttribute(variableEClass, VARIABLE__NAME);

    deviceValueEClass = createEClass(DEVICE_VALUE);
    createEReference(deviceValueEClass, DEVICE_VALUE__VALUE);
    createEReference(deviceValueEClass, DEVICE_VALUE__REF);

    diskSlotValueEClass = createEClass(DISK_SLOT_VALUE);
    createEReference(diskSlotValueEClass, DISK_SLOT_VALUE__VALUE);
    createEReference(diskSlotValueEClass, DISK_SLOT_VALUE__REF);

    variableValueEClass = createEClass(VARIABLE_VALUE);
    createEReference(variableValueEClass, VARIABLE_VALUE__VALUE);
    createEReference(variableValueEClass, VARIABLE_VALUE__REF);

    diskStateValueEClass = createEClass(DISK_STATE_VALUE);
    createEAttribute(diskStateValueEClass, DISK_STATE_VALUE__VALUE);

    diskSlotStateValueEClass = createEClass(DISK_SLOT_STATE_VALUE);
    createEAttribute(diskSlotStateValueEClass, DISK_SLOT_STATE_VALUE__VALUE);

    colorValueEClass = createEClass(COLOR_VALUE);
    createEAttribute(colorValueEClass, COLOR_VALUE__VALUE);

    numberEClass = createEClass(NUMBER);
    createEAttribute(numberEClass, NUMBER__VALUE);

    craneEClass = createEClass(CRANE);

    cranePositionParameterEClass = createEClass(CRANE_POSITION_PARAMETER);
    createEAttribute(cranePositionParameterEClass, CRANE_POSITION_PARAMETER__DEGREE);
    createEAttribute(cranePositionParameterEClass, CRANE_POSITION_PARAMETER__NAME);

    diskEClass = createEClass(DISK);
    createEReference(diskEClass, DISK__SLOT_PARAMETER);

    diskSlotParameterEClass = createEClass(DISK_SLOT_PARAMETER);
    createEAttribute(diskSlotParameterEClass, DISK_SLOT_PARAMETER__SIZE);

    diskZoneParameterEClass = createEClass(DISK_ZONE_PARAMETER);
    createEAttribute(diskZoneParameterEClass, DISK_ZONE_PARAMETER__NAME);
    createEAttribute(diskZoneParameterEClass, DISK_ZONE_PARAMETER__SLOT);

    cameraEClass = createEClass(CAMERA);

    cameraColorParameterEClass = createEClass(CAMERA_COLOR_PARAMETER);
    createEAttribute(cameraColorParameterEClass, CAMERA_COLOR_PARAMETER__COLOR);

    deviceConditionalEClass = createEClass(DEVICE_CONDITIONAL);
    createEReference(deviceConditionalEClass, DEVICE_CONDITIONAL__DEVICE);
    createEAttribute(deviceConditionalEClass, DEVICE_CONDITIONAL__NOT_OPERATOR);
    createEReference(deviceConditionalEClass, DEVICE_CONDITIONAL__DEVICE_VALUE);

    variableConditionalEClass = createEClass(VARIABLE_CONDITIONAL);
    createEReference(variableConditionalEClass, VARIABLE_CONDITIONAL__VARIABLE);
    createEAttribute(variableConditionalEClass, VARIABLE_CONDITIONAL__COMPARISON_OPERATOR);
    createEReference(variableConditionalEClass, VARIABLE_CONDITIONAL__VARIABLE_VALUE);

    cranePickupOperationEClass = createEClass(CRANE_PICKUP_OPERATION);

    craneDropOperationEClass = createEClass(CRANE_DROP_OPERATION);

    diskMoveSlotOperationEClass = createEClass(DISK_MOVE_SLOT_OPERATION);
    createEReference(diskMoveSlotOperationEClass, DISK_MOVE_SLOT_OPERATION__SOURCE);
    createEReference(diskMoveSlotOperationEClass, DISK_MOVE_SLOT_OPERATION__TARGET);

    diskMoveVariableSlotOperationEClass = createEClass(DISK_MOVE_VARIABLE_SLOT_OPERATION);
    createEReference(diskMoveVariableSlotOperationEClass, DISK_MOVE_VARIABLE_SLOT_OPERATION__VARIABLE);
    createEReference(diskMoveVariableSlotOperationEClass, DISK_MOVE_VARIABLE_SLOT_OPERATION__TARGET);

    diskMoveEmptySlotOperationEClass = createEClass(DISK_MOVE_EMPTY_SLOT_OPERATION);
    createEReference(diskMoveEmptySlotOperationEClass, DISK_MOVE_EMPTY_SLOT_OPERATION__TARGET);

    diskMarkSlotOperationEClass = createEClass(DISK_MARK_SLOT_OPERATION);
    createEReference(diskMarkSlotOperationEClass, DISK_MARK_SLOT_OPERATION__TARGET);
    createEReference(diskMarkSlotOperationEClass, DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE);
    createEAttribute(diskMarkSlotOperationEClass, DISK_MARK_SLOT_OPERATION__QUANTITY);
    createEAttribute(diskMarkSlotOperationEClass, DISK_MARK_SLOT_OPERATION__MEASURE);

    diskWaitOperationEClass = createEClass(DISK_WAIT_OPERATION);

    cameraScanOperationEClass = createEClass(CAMERA_SCAN_OPERATION);
    createEReference(cameraScanOperationEClass, CAMERA_SCAN_OPERATION__DEVICE);
    createEReference(cameraScanOperationEClass, CAMERA_SCAN_OPERATION__VARIABLE);

    forEachEClass = createEClass(FOR_EACH);
    createEReference(forEachEClass, FOR_EACH__VARIABLE);
    createEReference(forEachEClass, FOR_EACH__DEVICE);
    createEAttribute(forEachEClass, FOR_EACH__OPERATOR);
    createEReference(forEachEClass, FOR_EACH__VARIABLE_VALUE);
    createEReference(forEachEClass, FOR_EACH__STATEMENTS);

    localVariableEClass = createEClass(LOCAL_VARIABLE);

    globalVariableEClass = createEClass(GLOBAL_VARIABLE);

    // Create enums
    comparisoN_OPERATOREEnum = createEEnum(COMPARISON_OPERATOR);
    colorEEnum = createEEnum(COLOR);
    disK_SLOT_STATESEEnum = createEEnum(DISK_SLOT_STATES);
    disK_STATESEEnum = createEEnum(DISK_STATES);
    timeEEnum = createEEnum(TIME);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    craneParameterEClass.getESuperTypes().add(this.getParameter());
    diskParameterEClass.getESuperTypes().add(this.getParameter());
    cameraParameterEClass.getESuperTypes().add(this.getParameter());
    conditionalEClass.getESuperTypes().add(this.getStatement());
    operationEClass.getESuperTypes().add(this.getStatement());
    craneOperationEClass.getESuperTypes().add(this.getOperation());
    diskOperationEClass.getESuperTypes().add(this.getOperation());
    cameraOperationEClass.getESuperTypes().add(this.getOperation());
    loopEClass.getESuperTypes().add(this.getStatement());
    craneEClass.getESuperTypes().add(this.getDevice());
    cranePositionParameterEClass.getESuperTypes().add(this.getCraneParameter());
    diskEClass.getESuperTypes().add(this.getDevice());
    diskSlotParameterEClass.getESuperTypes().add(this.getDiskParameter());
    diskZoneParameterEClass.getESuperTypes().add(this.getDiskParameter());
    cameraEClass.getESuperTypes().add(this.getDevice());
    cameraColorParameterEClass.getESuperTypes().add(this.getCameraParameter());
    deviceConditionalEClass.getESuperTypes().add(this.getConditional());
    variableConditionalEClass.getESuperTypes().add(this.getConditional());
    cranePickupOperationEClass.getESuperTypes().add(this.getCraneOperation());
    craneDropOperationEClass.getESuperTypes().add(this.getCraneOperation());
    diskMoveSlotOperationEClass.getESuperTypes().add(this.getDiskOperation());
    diskMoveVariableSlotOperationEClass.getESuperTypes().add(this.getDiskOperation());
    diskMoveEmptySlotOperationEClass.getESuperTypes().add(this.getDiskOperation());
    diskMarkSlotOperationEClass.getESuperTypes().add(this.getDiskOperation());
    diskWaitOperationEClass.getESuperTypes().add(this.getDiskOperation());
    cameraScanOperationEClass.getESuperTypes().add(this.getCameraOperation());
    forEachEClass.getESuperTypes().add(this.getLoop());
    localVariableEClass.getESuperTypes().add(this.getVariable());
    globalVariableEClass.getESuperTypes().add(this.getVariable());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Configurations(), this.getConfiguration(), null, "configurations", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_Statements(), this.getStatement(), null, "statements", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configurationEClass, Configuration.class, "Configuration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConfiguration_Device(), this.getDevice(), null, "device", null, 0, 1, Configuration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deviceEClass, Device.class, "Device", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDevice_Name(), ecorePackage.getEString(), "name", null, 0, 1, Device.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDevice_Targets(), this.getParameter(), null, "targets", null, 0, -1, Device.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterEClass, Parameter.class, "Parameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(craneParameterEClass, CraneParameter.class, "CraneParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(diskParameterEClass, DiskParameter.class, "DiskParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(cameraParameterEClass, CameraParameter.class, "CameraParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(conditionalEClass, Conditional.class, "Conditional", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditional_Statements(), this.getStatement(), null, "statements", null, 0, -1, Conditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(operationEClass, Operation.class, "Operation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(craneOperationEClass, CraneOperation.class, "CraneOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCraneOperation_Device(), this.getCrane(), null, "device", null, 0, 1, CraneOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCraneOperation_Target(), this.getCraneParameter(), null, "target", null, 0, 1, CraneOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskOperationEClass, DiskOperation.class, "DiskOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDiskOperation_Device(), this.getDisk(), null, "device", null, 0, 1, DiskOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cameraOperationEClass, CameraOperation.class, "CameraOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(loopEClass, Loop.class, "Loop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(variableEClass, Variable.class, "Variable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVariable_Name(), ecorePackage.getEString(), "name", null, 0, 1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deviceValueEClass, DeviceValue.class, "DeviceValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDeviceValue_Value(), ecorePackage.getEObject(), null, "value", null, 0, 1, DeviceValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeviceValue_Ref(), this.getParameter(), null, "ref", null, 0, 1, DeviceValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskSlotValueEClass, DiskSlotValue.class, "DiskSlotValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDiskSlotValue_Value(), ecorePackage.getEObject(), null, "value", null, 0, 1, DiskSlotValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiskSlotValue_Ref(), this.getVariable(), null, "ref", null, 0, 1, DiskSlotValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableValueEClass, VariableValue.class, "VariableValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableValue_Value(), ecorePackage.getEObject(), null, "value", null, 0, 1, VariableValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVariableValue_Ref(), this.getVariable(), null, "ref", null, 0, 1, VariableValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskStateValueEClass, DiskStateValue.class, "DiskStateValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskStateValue_Value(), this.getDISK_STATES(), "value", null, 0, 1, DiskStateValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskSlotStateValueEClass, DiskSlotStateValue.class, "DiskSlotStateValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskSlotStateValue_Value(), this.getDISK_SLOT_STATES(), "value", null, 0, 1, DiskSlotStateValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colorValueEClass, ColorValue.class, "ColorValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColorValue_Value(), this.getCOLOR(), "value", null, 0, 1, ColorValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numberEClass, xtext.factoryLang.factoryLang.Number.class, "Number", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNumber_Value(), ecorePackage.getEInt(), "value", null, 0, 1, xtext.factoryLang.factoryLang.Number.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(craneEClass, Crane.class, "Crane", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(cranePositionParameterEClass, CranePositionParameter.class, "CranePositionParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCranePositionParameter_Degree(), ecorePackage.getEInt(), "degree", null, 0, 1, CranePositionParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCranePositionParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, CranePositionParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskEClass, Disk.class, "Disk", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDisk_SlotParameter(), this.getDiskParameter(), null, "slotParameter", null, 0, 1, Disk.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskSlotParameterEClass, DiskSlotParameter.class, "DiskSlotParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskSlotParameter_Size(), ecorePackage.getEInt(), "size", null, 0, 1, DiskSlotParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskZoneParameterEClass, DiskZoneParameter.class, "DiskZoneParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiskZoneParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, DiskZoneParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiskZoneParameter_Slot(), ecorePackage.getEInt(), "slot", null, 0, 1, DiskZoneParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cameraEClass, Camera.class, "Camera", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(cameraColorParameterEClass, CameraColorParameter.class, "CameraColorParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCameraColorParameter_Color(), this.getCOLOR(), "color", null, 0, 1, CameraColorParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deviceConditionalEClass, DeviceConditional.class, "DeviceConditional", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDeviceConditional_Device(), this.getDevice(), null, "device", null, 0, 1, DeviceConditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDeviceConditional_Not_operator(), ecorePackage.getEString(), "not_operator", null, 0, 1, DeviceConditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeviceConditional_DeviceValue(), this.getDeviceValue(), null, "deviceValue", null, 0, 1, DeviceConditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableConditionalEClass, VariableConditional.class, "VariableConditional", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableConditional_Variable(), this.getVariable(), null, "variable", null, 0, 1, VariableConditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariableConditional_Comparison_operator(), this.getCOMPARISON_OPERATOR(), "comparison_operator", null, 0, 1, VariableConditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVariableConditional_VariableValue(), this.getVariableValue(), null, "variableValue", null, 0, 1, VariableConditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cranePickupOperationEClass, CranePickupOperation.class, "CranePickupOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(craneDropOperationEClass, CraneDropOperation.class, "CraneDropOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(diskMoveSlotOperationEClass, DiskMoveSlotOperation.class, "DiskMoveSlotOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDiskMoveSlotOperation_Source(), this.getDiskZoneParameter(), null, "source", null, 0, 1, DiskMoveSlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiskMoveSlotOperation_Target(), this.getDiskZoneParameter(), null, "target", null, 0, 1, DiskMoveSlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskMoveVariableSlotOperationEClass, DiskMoveVariableSlotOperation.class, "DiskMoveVariableSlotOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDiskMoveVariableSlotOperation_Variable(), this.getVariable(), null, "variable", null, 0, 1, DiskMoveVariableSlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiskMoveVariableSlotOperation_Target(), this.getDiskZoneParameter(), null, "target", null, 0, 1, DiskMoveVariableSlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskMoveEmptySlotOperationEClass, DiskMoveEmptySlotOperation.class, "DiskMoveEmptySlotOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDiskMoveEmptySlotOperation_Target(), this.getDiskZoneParameter(), null, "target", null, 0, 1, DiskMoveEmptySlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskMarkSlotOperationEClass, DiskMarkSlotOperation.class, "DiskMarkSlotOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDiskMarkSlotOperation_Target(), this.getDiskZoneParameter(), null, "target", null, 0, 1, DiskMarkSlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiskMarkSlotOperation_DiskSlotValue(), this.getDiskSlotValue(), null, "diskSlotValue", null, 0, 1, DiskMarkSlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiskMarkSlotOperation_Quantity(), ecorePackage.getEInt(), "quantity", null, 0, 1, DiskMarkSlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiskMarkSlotOperation_Measure(), this.getTIME(), "measure", null, 0, 1, DiskMarkSlotOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diskWaitOperationEClass, DiskWaitOperation.class, "DiskWaitOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(cameraScanOperationEClass, CameraScanOperation.class, "CameraScanOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCameraScanOperation_Device(), this.getCamera(), null, "device", null, 0, 1, CameraScanOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCameraScanOperation_Variable(), this.getVariable(), null, "variable", null, 0, 1, CameraScanOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forEachEClass, ForEach.class, "ForEach", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getForEach_Variable(), this.getVariable(), null, "variable", null, 0, 1, ForEach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForEach_Device(), this.getDevice(), null, "device", null, 0, 1, ForEach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getForEach_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, ForEach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForEach_VariableValue(), this.getVariableValue(), null, "variableValue", null, 0, 1, ForEach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForEach_Statements(), this.getStatement(), null, "statements", null, 0, -1, ForEach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(localVariableEClass, LocalVariable.class, "LocalVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(globalVariableEClass, GlobalVariable.class, "GlobalVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Initialize enums and add enum literals
    initEEnum(comparisoN_OPERATOREEnum, xtext.factoryLang.factoryLang.COMPARISON_OPERATOR.class, "COMPARISON_OPERATOR");
    addEEnumLiteral(comparisoN_OPERATOREEnum, xtext.factoryLang.factoryLang.COMPARISON_OPERATOR.UNDEFINED);
    addEEnumLiteral(comparisoN_OPERATOREEnum, xtext.factoryLang.factoryLang.COMPARISON_OPERATOR.LESS_THAN);
    addEEnumLiteral(comparisoN_OPERATOREEnum, xtext.factoryLang.factoryLang.COMPARISON_OPERATOR.GREATER_THAN);
    addEEnumLiteral(comparisoN_OPERATOREEnum, xtext.factoryLang.factoryLang.COMPARISON_OPERATOR.NOT);

    initEEnum(colorEEnum, xtext.factoryLang.factoryLang.COLOR.class, "COLOR");
    addEEnumLiteral(colorEEnum, xtext.factoryLang.factoryLang.COLOR.RED);
    addEEnumLiteral(colorEEnum, xtext.factoryLang.factoryLang.COLOR.GREEN);
    addEEnumLiteral(colorEEnum, xtext.factoryLang.factoryLang.COLOR.BLUE);

    initEEnum(disK_SLOT_STATESEEnum, xtext.factoryLang.factoryLang.DISK_SLOT_STATES.class, "DISK_SLOT_STATES");
    addEEnumLiteral(disK_SLOT_STATESEEnum, xtext.factoryLang.factoryLang.DISK_SLOT_STATES.FREE);
    addEEnumLiteral(disK_SLOT_STATESEEnum, xtext.factoryLang.factoryLang.DISK_SLOT_STATES.IN_PROGRESS);
    addEEnumLiteral(disK_SLOT_STATESEEnum, xtext.factoryLang.factoryLang.DISK_SLOT_STATES.COMPLETE);

    initEEnum(disK_STATESEEnum, xtext.factoryLang.factoryLang.DISK_STATES.class, "DISK_STATES");
    addEEnumLiteral(disK_STATESEEnum, xtext.factoryLang.factoryLang.DISK_STATES.FULL);
    addEEnumLiteral(disK_STATESEEnum, xtext.factoryLang.factoryLang.DISK_STATES.EMPTY);

    initEEnum(timeEEnum, xtext.factoryLang.factoryLang.TIME.class, "TIME");
    addEEnumLiteral(timeEEnum, xtext.factoryLang.factoryLang.TIME.SECONDS);
    addEEnumLiteral(timeEEnum, xtext.factoryLang.factoryLang.TIME.SECOND);
    addEEnumLiteral(timeEEnum, xtext.factoryLang.factoryLang.TIME.MINUTES);
    addEEnumLiteral(timeEEnum, xtext.factoryLang.factoryLang.TIME.MINUTE);
    addEEnumLiteral(timeEEnum, xtext.factoryLang.factoryLang.TIME.HOURS);
    addEEnumLiteral(timeEEnum, xtext.factoryLang.factoryLang.TIME.HOUR);

    // Create resource
    createResource(eNS_URI);
  }

} //FactoryLangPackageImpl
