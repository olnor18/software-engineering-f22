/**
 * generated by Xtext 2.26.0
 */
package xtext.factoryLang.factoryLang.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.factoryLang.factoryLang.DiskMarkSlotOperation;
import xtext.factoryLang.factoryLang.DiskSlotValue;
import xtext.factoryLang.factoryLang.DiskZoneParameter;
import xtext.factoryLang.factoryLang.FactoryLangPackage;
import xtext.factoryLang.factoryLang.TIME;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Disk Mark Slot Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.DiskMarkSlotOperationImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.DiskMarkSlotOperationImpl#getDiskSlotValue <em>Disk Slot Value</em>}</li>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.DiskMarkSlotOperationImpl#getQuantity <em>Quantity</em>}</li>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.DiskMarkSlotOperationImpl#getMeasure <em>Measure</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DiskMarkSlotOperationImpl extends DiskOperationImpl implements DiskMarkSlotOperation
{
  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected DiskZoneParameter target;

  /**
   * The cached value of the '{@link #getDiskSlotValue() <em>Disk Slot Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiskSlotValue()
   * @generated
   * @ordered
   */
  protected DiskSlotValue diskSlotValue;

  /**
   * The default value of the '{@link #getQuantity() <em>Quantity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantity()
   * @generated
   * @ordered
   */
  protected static final int QUANTITY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getQuantity() <em>Quantity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantity()
   * @generated
   * @ordered
   */
  protected int quantity = QUANTITY_EDEFAULT;

  /**
   * The default value of the '{@link #getMeasure() <em>Measure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasure()
   * @generated
   * @ordered
   */
  protected static final TIME MEASURE_EDEFAULT = TIME.SECONDS;

  /**
   * The cached value of the '{@link #getMeasure() <em>Measure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasure()
   * @generated
   * @ordered
   */
  protected TIME measure = MEASURE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DiskMarkSlotOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FactoryLangPackage.Literals.DISK_MARK_SLOT_OPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskZoneParameter getTarget()
  {
    if (target != null && target.eIsProxy())
    {
      InternalEObject oldTarget = (InternalEObject)target;
      target = (DiskZoneParameter)eResolveProxy(oldTarget);
      if (target != oldTarget)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FactoryLangPackage.DISK_MARK_SLOT_OPERATION__TARGET, oldTarget, target));
      }
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiskZoneParameter basicGetTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(DiskZoneParameter newTarget)
  {
    DiskZoneParameter oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DISK_MARK_SLOT_OPERATION__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiskSlotValue getDiskSlotValue()
  {
    return diskSlotValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDiskSlotValue(DiskSlotValue newDiskSlotValue, NotificationChain msgs)
  {
    DiskSlotValue oldDiskSlotValue = diskSlotValue;
    diskSlotValue = newDiskSlotValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE, oldDiskSlotValue, newDiskSlotValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDiskSlotValue(DiskSlotValue newDiskSlotValue)
  {
    if (newDiskSlotValue != diskSlotValue)
    {
      NotificationChain msgs = null;
      if (diskSlotValue != null)
        msgs = ((InternalEObject)diskSlotValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE, null, msgs);
      if (newDiskSlotValue != null)
        msgs = ((InternalEObject)newDiskSlotValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE, null, msgs);
      msgs = basicSetDiskSlotValue(newDiskSlotValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE, newDiskSlotValue, newDiskSlotValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getQuantity()
  {
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuantity(int newQuantity)
  {
    int oldQuantity = quantity;
    quantity = newQuantity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DISK_MARK_SLOT_OPERATION__QUANTITY, oldQuantity, quantity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TIME getMeasure()
  {
    return measure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMeasure(TIME newMeasure)
  {
    TIME oldMeasure = measure;
    measure = newMeasure == null ? MEASURE_EDEFAULT : newMeasure;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.DISK_MARK_SLOT_OPERATION__MEASURE, oldMeasure, measure));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE:
        return basicSetDiskSlotValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__TARGET:
        if (resolve) return getTarget();
        return basicGetTarget();
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE:
        return getDiskSlotValue();
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__QUANTITY:
        return getQuantity();
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__MEASURE:
        return getMeasure();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__TARGET:
        setTarget((DiskZoneParameter)newValue);
        return;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE:
        setDiskSlotValue((DiskSlotValue)newValue);
        return;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__QUANTITY:
        setQuantity((Integer)newValue);
        return;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__MEASURE:
        setMeasure((TIME)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__TARGET:
        setTarget((DiskZoneParameter)null);
        return;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE:
        setDiskSlotValue((DiskSlotValue)null);
        return;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__QUANTITY:
        setQuantity(QUANTITY_EDEFAULT);
        return;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__MEASURE:
        setMeasure(MEASURE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__TARGET:
        return target != null;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__DISK_SLOT_VALUE:
        return diskSlotValue != null;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__QUANTITY:
        return quantity != QUANTITY_EDEFAULT;
      case FactoryLangPackage.DISK_MARK_SLOT_OPERATION__MEASURE:
        return measure != MEASURE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (quantity: ");
    result.append(quantity);
    result.append(", measure: ");
    result.append(measure);
    result.append(')');
    return result.toString();
  }

} //DiskMarkSlotOperationImpl
