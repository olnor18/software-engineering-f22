/**
 * generated by Xtext 2.26.0
 */
package xtext.factoryLang.factoryLang.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.factoryLang.factoryLang.COMPARISON_OPERATOR;
import xtext.factoryLang.factoryLang.FactoryLangPackage;
import xtext.factoryLang.factoryLang.Variable;
import xtext.factoryLang.factoryLang.VariableConditional;
import xtext.factoryLang.factoryLang.VariableValue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Variable Conditional</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.VariableConditionalImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.VariableConditionalImpl#getComparison_operator <em>Comparison operator</em>}</li>
 *   <li>{@link xtext.factoryLang.factoryLang.impl.VariableConditionalImpl#getVariableValue <em>Variable Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VariableConditionalImpl extends ConditionalImpl implements VariableConditional
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * The default value of the '{@link #getComparison_operator() <em>Comparison operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_operator()
   * @generated
   * @ordered
   */
  protected static final COMPARISON_OPERATOR COMPARISON_OPERATOR_EDEFAULT = COMPARISON_OPERATOR.UNDEFINED;

  /**
   * The cached value of the '{@link #getComparison_operator() <em>Comparison operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_operator()
   * @generated
   * @ordered
   */
  protected COMPARISON_OPERATOR comparison_operator = COMPARISON_OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariableValue() <em>Variable Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariableValue()
   * @generated
   * @ordered
   */
  protected VariableValue variableValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariableConditionalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FactoryLangPackage.Literals.VARIABLE_CONDITIONAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (Variable)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COMPARISON_OPERATOR getComparison_operator()
  {
    return comparison_operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparison_operator(COMPARISON_OPERATOR newComparison_operator)
  {
    COMPARISON_OPERATOR oldComparison_operator = comparison_operator;
    comparison_operator = newComparison_operator == null ? COMPARISON_OPERATOR_EDEFAULT : newComparison_operator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.VARIABLE_CONDITIONAL__COMPARISON_OPERATOR, oldComparison_operator, comparison_operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValue getVariableValue()
  {
    return variableValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariableValue(VariableValue newVariableValue, NotificationChain msgs)
  {
    VariableValue oldVariableValue = variableValue;
    variableValue = newVariableValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE, oldVariableValue, newVariableValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariableValue(VariableValue newVariableValue)
  {
    if (newVariableValue != variableValue)
    {
      NotificationChain msgs = null;
      if (variableValue != null)
        msgs = ((InternalEObject)variableValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE, null, msgs);
      if (newVariableValue != null)
        msgs = ((InternalEObject)newVariableValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE, null, msgs);
      msgs = basicSetVariableValue(newVariableValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE, newVariableValue, newVariableValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE:
        return basicSetVariableValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case FactoryLangPackage.VARIABLE_CONDITIONAL__COMPARISON_OPERATOR:
        return getComparison_operator();
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE:
        return getVariableValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE:
        setVariable((Variable)newValue);
        return;
      case FactoryLangPackage.VARIABLE_CONDITIONAL__COMPARISON_OPERATOR:
        setComparison_operator((COMPARISON_OPERATOR)newValue);
        return;
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE:
        setVariableValue((VariableValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE:
        setVariable((Variable)null);
        return;
      case FactoryLangPackage.VARIABLE_CONDITIONAL__COMPARISON_OPERATOR:
        setComparison_operator(COMPARISON_OPERATOR_EDEFAULT);
        return;
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE:
        setVariableValue((VariableValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE:
        return variable != null;
      case FactoryLangPackage.VARIABLE_CONDITIONAL__COMPARISON_OPERATOR:
        return comparison_operator != COMPARISON_OPERATOR_EDEFAULT;
      case FactoryLangPackage.VARIABLE_CONDITIONAL__VARIABLE_VALUE:
        return variableValue != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (comparison_operator: ");
    result.append(comparison_operator);
    result.append(')');
    return result.toString();
  }

} //VariableConditionalImpl
