/*
 * generated by Xtext 2.26.0
 */
package xtext.factoryLang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FactoryLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConfigurationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConfigurationsConfigurationParserRuleCall_0_0 = (RuleCall)cConfigurationsAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Model:
		//    configurations+=Configuration+ statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }
		
		//configurations+=Configuration+ statements+=Statement+
		public Group getGroup() { return cGroup; }
		
		//configurations+=Configuration+
		public Assignment getConfigurationsAssignment_0() { return cConfigurationsAssignment_0; }
		
		//Configuration
		public RuleCall getConfigurationsConfigurationParserRuleCall_0_0() { return cConfigurationsConfigurationParserRuleCall_0_0; }
		
		//statements+=Statement+
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeviceDeviceParserRuleCall_1_0 = (RuleCall)cDeviceAssignment_1.eContents().get(0);
		
		//// ----- CONFIGURATION ----- //
		//Configuration:
		//    'create' device=Device;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' device=Device
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//device=Device
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//Device
		public RuleCall getDeviceDeviceParserRuleCall_1_0() { return cDeviceDeviceParserRuleCall_1_0; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Device");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCraneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCameraParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Device:
		//    Crane | Disk | Camera;
		@Override public ParserRule getRule() { return rule; }
		
		//Crane | Disk | Camera
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Crane
		public RuleCall getCraneParserRuleCall_0() { return cCraneParserRuleCall_0; }
		
		//Disk
		public RuleCall getDiskParserRuleCall_1() { return cDiskParserRuleCall_1; }
		
		//Camera
		public RuleCall getCameraParserRuleCall_2() { return cCameraParserRuleCall_2; }
	}
	public class CraneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Crane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCraneAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCraneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cTargetsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetsCraneParameterParserRuleCall_5_0 = (RuleCall)cTargetsAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//// ----- CONFIGURATION:CRANE ----- //
		//Crane returns Device:
		//    {Crane} 'crane' 'named' name=ID BEGIN targets+=CraneParameter+ END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Crane} 'crane' 'named' name=ID BEGIN targets+=CraneParameter+ END
		public Group getGroup() { return cGroup; }
		
		//{Crane}
		public Action getCraneAction_0() { return cCraneAction_0; }
		
		//'crane'
		public Keyword getCraneKeyword_1() { return cCraneKeyword_1; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//targets+=CraneParameter+
		public Assignment getTargetsAssignment_5() { return cTargetsAssignment_5; }
		
		//CraneParameter
		public RuleCall getTargetsCraneParameterParserRuleCall_5_0() { return cTargetsCraneParameterParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class CraneParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CraneParameter");
		private final RuleCall cCranePositionParameterParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CraneParameter returns Parameter:
		//    CranePositionParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//CranePositionParameter
		public RuleCall getCranePositionParameterParserRuleCall() { return cCranePositionParameterParserRuleCall; }
	}
	public class CranePositionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CranePositionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCranePositionParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPositionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDegreeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDegreeINTTerminalRuleCall_4_0 = (RuleCall)cDegreeAssignment_4.eContents().get(0);
		private final Keyword cNamedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		
		//CranePositionParameter returns CraneParameter:
		//    {CranePositionParameter} 'with' 'position' 'at' degree=INT 'named' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{CranePositionParameter} 'with' 'position' 'at' degree=INT 'named' name=ID
		public Group getGroup() { return cGroup; }
		
		//{CranePositionParameter}
		public Action getCranePositionParameterAction_0() { return cCranePositionParameterAction_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'position'
		public Keyword getPositionKeyword_2() { return cPositionKeyword_2; }
		
		//'at'
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//degree=INT
		public Assignment getDegreeAssignment_4() { return cDegreeAssignment_4; }
		
		//INT
		public RuleCall getDegreeINTTerminalRuleCall_4_0() { return cDegreeINTTerminalRuleCall_4_0; }
		
		//'named'
		public Keyword getNamedKeyword_5() { return cNamedKeyword_5; }
		
		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
	}
	public class DiskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Disk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDiskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cSlotParameterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSlotParameterDiskSlotParameterParserRuleCall_5_0 = (RuleCall)cSlotParameterAssignment_5.eContents().get(0);
		private final Assignment cTargetsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetsDiskParameterParserRuleCall_6_0 = (RuleCall)cTargetsAssignment_6.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//// ----- CONFIGURATION:DISK ----- //
		//Disk returns Device:
		//    {Disk} 'disk' 'named' name=ID BEGIN slotParameter=DiskSlotParameter targets+=DiskParameter+ END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Disk} 'disk' 'named' name=ID BEGIN slotParameter=DiskSlotParameter targets+=DiskParameter+ END
		public Group getGroup() { return cGroup; }
		
		//{Disk}
		public Action getDiskAction_0() { return cDiskAction_0; }
		
		//'disk'
		public Keyword getDiskKeyword_1() { return cDiskKeyword_1; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//slotParameter=DiskSlotParameter
		public Assignment getSlotParameterAssignment_5() { return cSlotParameterAssignment_5; }
		
		//DiskSlotParameter
		public RuleCall getSlotParameterDiskSlotParameterParserRuleCall_5_0() { return cSlotParameterDiskSlotParameterParserRuleCall_5_0; }
		
		//targets+=DiskParameter+
		public Assignment getTargetsAssignment_6() { return cTargetsAssignment_6; }
		
		//DiskParameter
		public RuleCall getTargetsDiskParameterParserRuleCall_6_0() { return cTargetsDiskParameterParserRuleCall_6_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7() { return cENDTerminalRuleCall_7; }
	}
	public class DiskParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskParameter");
		private final RuleCall cDiskZoneParameterParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DiskParameter returns Parameter:
		//    DiskZoneParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//DiskZoneParameter
		public RuleCall getDiskZoneParameterParserRuleCall() { return cDiskZoneParameterParserRuleCall; }
	}
	public class DiskSlotParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskSlotParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskSlotParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cSlotsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DiskSlotParameter returns DiskParameter:
		//    {DiskSlotParameter} 'with' size=INT 'slots';
		@Override public ParserRule getRule() { return rule; }
		
		//{DiskSlotParameter} 'with' size=INT 'slots'
		public Group getGroup() { return cGroup; }
		
		//{DiskSlotParameter}
		public Action getDiskSlotParameterAction_0() { return cDiskSlotParameterAction_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//size=INT
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }
		
		//'slots'
		public Keyword getSlotsKeyword_3() { return cSlotsKeyword_3; }
	}
	public class DiskZoneParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskZoneParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskZoneParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cZoneKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNamedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSlotKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSlotAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSlotINTTerminalRuleCall_7_0 = (RuleCall)cSlotAssignment_7.eContents().get(0);
		
		//DiskZoneParameter returns DiskParameter:
		//    {DiskZoneParameter} 'with' 'zone' 'named' name=ID 'at' 'slot' slot=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{DiskZoneParameter} 'with' 'zone' 'named' name=ID 'at' 'slot' slot=INT
		public Group getGroup() { return cGroup; }
		
		//{DiskZoneParameter}
		public Action getDiskZoneParameterAction_0() { return cDiskZoneParameterAction_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'zone'
		public Keyword getZoneKeyword_2() { return cZoneKeyword_2; }
		
		//'named'
		public Keyword getNamedKeyword_3() { return cNamedKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'at'
		public Keyword getAtKeyword_5() { return cAtKeyword_5; }
		
		//'slot'
		public Keyword getSlotKeyword_6() { return cSlotKeyword_6; }
		
		//slot=INT
		public Assignment getSlotAssignment_7() { return cSlotAssignment_7; }
		
		//INT
		public RuleCall getSlotINTTerminalRuleCall_7_0() { return cSlotINTTerminalRuleCall_7_0; }
	}
	public class CameraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Camera");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCameraAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCameraKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cTargetsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetsCameraParameterParserRuleCall_5_0 = (RuleCall)cTargetsAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//// ----- CONFIGURATION:CAMERA ----- //
		//Camera returns Device:
		//    {Camera} 'camera' 'named' name=ID BEGIN targets+=CameraParameter+ END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Camera} 'camera' 'named' name=ID BEGIN targets+=CameraParameter+ END
		public Group getGroup() { return cGroup; }
		
		//{Camera}
		public Action getCameraAction_0() { return cCameraAction_0; }
		
		//'camera'
		public Keyword getCameraKeyword_1() { return cCameraKeyword_1; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//targets+=CameraParameter+
		public Assignment getTargetsAssignment_5() { return cTargetsAssignment_5; }
		
		//CameraParameter
		public RuleCall getTargetsCameraParameterParserRuleCall_5_0() { return cTargetsCameraParameterParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class CameraParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CameraParameter");
		private final RuleCall cCameraColorParameterParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CameraParameter returns Parameter:
		//    CameraColorParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//CameraColorParameter
		public RuleCall getCameraColorParameterParserRuleCall() { return cCameraColorParameterParserRuleCall; }
	}
	public class CameraColorParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CameraColorParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCameraColorParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cScannableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColorCOLOREnumRuleCall_4_0 = (RuleCall)cColorAssignment_4.eContents().get(0);
		
		//CameraColorParameter returns CameraParameter:
		//    {CameraColorParameter} 'with' 'scannable' 'color' color=COLOR;
		@Override public ParserRule getRule() { return rule; }
		
		//{CameraColorParameter} 'with' 'scannable' 'color' color=COLOR
		public Group getGroup() { return cGroup; }
		
		//{CameraColorParameter}
		public Action getCameraColorParameterAction_0() { return cCameraColorParameterAction_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'scannable'
		public Keyword getScannableKeyword_2() { return cScannableKeyword_2; }
		
		//'color'
		public Keyword getColorKeyword_3() { return cColorKeyword_3; }
		
		//color=COLOR
		public Assignment getColorAssignment_4() { return cColorAssignment_4; }
		
		//COLOR
		public RuleCall getColorCOLOREnumRuleCall_4_0() { return cColorCOLOREnumRuleCall_4_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// ----- STATEMENTS ----- //
		//Statement:
		//    Conditional | Operation | Loop;
		@Override public ParserRule getRule() { return rule; }
		
		//Conditional | Operation | Loop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_0() { return cConditionalParserRuleCall_0; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_2() { return cLoopParserRuleCall_2; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Conditional");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeviceConditionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ----- STATEMENTS:CONDITIONALS ----- //
		//Conditional returns Statement:
		//    DeviceConditional | VariableConditional;
		@Override public ParserRule getRule() { return rule; }
		
		//DeviceConditional | VariableConditional
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeviceConditional
		public RuleCall getDeviceConditionalParserRuleCall_0() { return cDeviceConditionalParserRuleCall_0; }
		
		//VariableConditional
		public RuleCall getVariableConditionalParserRuleCall_1() { return cVariableConditionalParserRuleCall_1; }
	}
	public class DeviceConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DeviceConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeviceConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDeviceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeviceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDeviceDeviceCrossReference_3_0 = (CrossReference)cDeviceAssignment_3.eContents().get(0);
		private final RuleCall cDeviceDeviceIDTerminalRuleCall_3_0_1 = (RuleCall)cDeviceDeviceCrossReference_3_0.eContents().get(1);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNot_operatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cNot_operatorNotKeyword_5_0 = (Keyword)cNot_operatorAssignment_5.eContents().get(0);
		private final Keyword cAtKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDeviceValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDeviceValueDeviceValueParserRuleCall_7_0 = (RuleCall)cDeviceValueAssignment_7.eContents().get(0);
		private final Keyword cThenKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cBEGINTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cStatementsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatementsStatementParserRuleCall_10_0 = (RuleCall)cStatementsAssignment_10.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//DeviceConditional returns Conditional:
		//    {DeviceConditional} 'if' 'device' device=[Device] 'is' (not_operator='not')? ('at')?
		//    deviceValue=DeviceValue
		//    'then' BEGIN statements+=Statement* END;
		@Override public ParserRule getRule() { return rule; }
		
		//{DeviceConditional} 'if' 'device' device=[Device] 'is' (not_operator='not')? ('at')?
		//deviceValue=DeviceValue
		//'then' BEGIN statements+=Statement* END
		public Group getGroup() { return cGroup; }
		
		//{DeviceConditional}
		public Action getDeviceConditionalAction_0() { return cDeviceConditionalAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'device'
		public Keyword getDeviceKeyword_2() { return cDeviceKeyword_2; }
		
		//device=[Device]
		public Assignment getDeviceAssignment_3() { return cDeviceAssignment_3; }
		
		//[Device]
		public CrossReference getDeviceDeviceCrossReference_3_0() { return cDeviceDeviceCrossReference_3_0; }
		
		//ID
		public RuleCall getDeviceDeviceIDTerminalRuleCall_3_0_1() { return cDeviceDeviceIDTerminalRuleCall_3_0_1; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//(not_operator='not')?
		public Assignment getNot_operatorAssignment_5() { return cNot_operatorAssignment_5; }
		
		//'not'
		public Keyword getNot_operatorNotKeyword_5_0() { return cNot_operatorNotKeyword_5_0; }
		
		//('at')?
		public Keyword getAtKeyword_6() { return cAtKeyword_6; }
		
		//deviceValue=DeviceValue
		public Assignment getDeviceValueAssignment_7() { return cDeviceValueAssignment_7; }
		
		//DeviceValue
		public RuleCall getDeviceValueDeviceValueParserRuleCall_7_0() { return cDeviceValueDeviceValueParserRuleCall_7_0; }
		
		//'then'
		public Keyword getThenKeyword_8() { return cThenKeyword_8; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_9() { return cBEGINTerminalRuleCall_9; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_10() { return cStatementsAssignment_10; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_10_0() { return cStatementsStatementParserRuleCall_10_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_11() { return cENDTerminalRuleCall_11; }
	}
	public class VariableConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.VariableConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVariableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariableVariableCrossReference_3_0 = (CrossReference)cVariableAssignment_3.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cVariableVariableCrossReference_3_0.eContents().get(1);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComparison_operatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComparison_operatorCOMPARISON_OPERATOREnumRuleCall_5_0 = (RuleCall)cComparison_operatorAssignment_5.eContents().get(0);
		private final Assignment cVariableValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariableValueVariableValueParserRuleCall_6_0 = (RuleCall)cVariableValueAssignment_6.eContents().get(0);
		private final Keyword cThenKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cBEGINTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cStatementsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsStatementParserRuleCall_9_0 = (RuleCall)cStatementsAssignment_9.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//VariableConditional returns Conditional:
		//    {VariableConditional} 'if' 'variable' variable=[Variable] 'is'
		//    (comparison_operator=COMPARISON_OPERATOR)?
		//    variableValue=VariableValue
		//    'then' BEGIN statements+=Statement* END;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableConditional} 'if' 'variable' variable=[Variable] 'is'
		//(comparison_operator=COMPARISON_OPERATOR)?
		//variableValue=VariableValue
		//'then' BEGIN statements+=Statement* END
		public Group getGroup() { return cGroup; }
		
		//{VariableConditional}
		public Action getVariableConditionalAction_0() { return cVariableConditionalAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'variable'
		public Keyword getVariableKeyword_2() { return cVariableKeyword_2; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_3_0() { return cVariableVariableCrossReference_3_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_3_0_1() { return cVariableVariableIDTerminalRuleCall_3_0_1; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//(comparison_operator=COMPARISON_OPERATOR)?
		public Assignment getComparison_operatorAssignment_5() { return cComparison_operatorAssignment_5; }
		
		//COMPARISON_OPERATOR
		public RuleCall getComparison_operatorCOMPARISON_OPERATOREnumRuleCall_5_0() { return cComparison_operatorCOMPARISON_OPERATOREnumRuleCall_5_0; }
		
		//variableValue=VariableValue
		public Assignment getVariableValueAssignment_6() { return cVariableValueAssignment_6; }
		
		//VariableValue
		public RuleCall getVariableValueVariableValueParserRuleCall_6_0() { return cVariableValueVariableValueParserRuleCall_6_0; }
		
		//'then'
		public Keyword getThenKeyword_7() { return cThenKeyword_7; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_8() { return cBEGINTerminalRuleCall_8; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_9() { return cStatementsAssignment_9; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_9_0() { return cStatementsStatementParserRuleCall_9_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_10() { return cENDTerminalRuleCall_10; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCraneOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiskOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCameraOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// ----- STATEMENTS:OPERATIONS ----- //
		//Operation returns Statement:
		//    CraneOperation | DiskOperation | CameraOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//CraneOperation | DiskOperation | CameraOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CraneOperation
		public RuleCall getCraneOperationParserRuleCall_0() { return cCraneOperationParserRuleCall_0; }
		
		//DiskOperation
		public RuleCall getDiskOperationParserRuleCall_1() { return cDiskOperationParserRuleCall_1; }
		
		//CameraOperation
		public RuleCall getCameraOperationParserRuleCall_2() { return cCameraOperationParserRuleCall_2; }
	}
	public class CraneOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CraneOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCranePickupOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCraneDropOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ----- STATEMENTS:OPERATIONS:CRANE ----- //
		//CraneOperation returns Operation:
		//    CranePickupOperation | CraneDropOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//CranePickupOperation | CraneDropOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CranePickupOperation
		public RuleCall getCranePickupOperationParserRuleCall_0() { return cCranePickupOperationParserRuleCall_0; }
		
		//CraneDropOperation
		public RuleCall getCraneDropOperationParserRuleCall_1() { return cCraneDropOperationParserRuleCall_1; }
	}
	public class CranePickupOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CranePickupOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCranePickupOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeviceCraneCrossReference_1_0 = (CrossReference)cDeviceAssignment_1.eContents().get(0);
		private final RuleCall cDeviceCraneIDTerminalRuleCall_1_0_1 = (RuleCall)cDeviceCraneCrossReference_1_0.eContents().get(1);
		private final Keyword cPickupKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cItemKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetCraneParameterCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetCraneParameterIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetCraneParameterCrossReference_5_0.eContents().get(1);
		
		//CranePickupOperation returns CraneOperation:
		//    {CranePickupOperation} device=[Crane] 'pickup' 'item' 'at' target=[CraneParameter];
		@Override public ParserRule getRule() { return rule; }
		
		//{CranePickupOperation} device=[Crane] 'pickup' 'item' 'at' target=[CraneParameter]
		public Group getGroup() { return cGroup; }
		
		//{CranePickupOperation}
		public Action getCranePickupOperationAction_0() { return cCranePickupOperationAction_0; }
		
		//device=[Crane]
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//[Crane]
		public CrossReference getDeviceCraneCrossReference_1_0() { return cDeviceCraneCrossReference_1_0; }
		
		//ID
		public RuleCall getDeviceCraneIDTerminalRuleCall_1_0_1() { return cDeviceCraneIDTerminalRuleCall_1_0_1; }
		
		//'pickup'
		public Keyword getPickupKeyword_2() { return cPickupKeyword_2; }
		
		//'item'
		public Keyword getItemKeyword_3() { return cItemKeyword_3; }
		
		//'at'
		public Keyword getAtKeyword_4() { return cAtKeyword_4; }
		
		//target=[CraneParameter]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[CraneParameter]
		public CrossReference getTargetCraneParameterCrossReference_5_0() { return cTargetCraneParameterCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetCraneParameterIDTerminalRuleCall_5_0_1() { return cTargetCraneParameterIDTerminalRuleCall_5_0_1; }
	}
	public class CraneDropOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CraneDropOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCraneDropOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeviceCraneCrossReference_1_0 = (CrossReference)cDeviceAssignment_1.eContents().get(0);
		private final RuleCall cDeviceCraneIDTerminalRuleCall_1_0_1 = (RuleCall)cDeviceCraneCrossReference_1_0.eContents().get(1);
		private final Keyword cDropKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cItemKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetCraneParameterCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetCraneParameterIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetCraneParameterCrossReference_5_0.eContents().get(1);
		
		//CraneDropOperation returns CraneOperation:
		//    {CraneDropOperation} device=[Crane] 'drop' 'item' 'at' target=[CraneParameter];
		@Override public ParserRule getRule() { return rule; }
		
		//{CraneDropOperation} device=[Crane] 'drop' 'item' 'at' target=[CraneParameter]
		public Group getGroup() { return cGroup; }
		
		//{CraneDropOperation}
		public Action getCraneDropOperationAction_0() { return cCraneDropOperationAction_0; }
		
		//device=[Crane]
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//[Crane]
		public CrossReference getDeviceCraneCrossReference_1_0() { return cDeviceCraneCrossReference_1_0; }
		
		//ID
		public RuleCall getDeviceCraneIDTerminalRuleCall_1_0_1() { return cDeviceCraneIDTerminalRuleCall_1_0_1; }
		
		//'drop'
		public Keyword getDropKeyword_2() { return cDropKeyword_2; }
		
		//'item'
		public Keyword getItemKeyword_3() { return cItemKeyword_3; }
		
		//'at'
		public Keyword getAtKeyword_4() { return cAtKeyword_4; }
		
		//target=[CraneParameter]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[CraneParameter]
		public CrossReference getTargetCraneParameterCrossReference_5_0() { return cTargetCraneParameterCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetCraneParameterIDTerminalRuleCall_5_0_1() { return cTargetCraneParameterIDTerminalRuleCall_5_0_1; }
	}
	public class DiskOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDiskMoveEmptySlotOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDiskMoveVariableSlotOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDiskMoveSlotOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDiskMarkSlotOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDiskWaitOperationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// ----- STATEMENTS:OPERATIONS:DISK ----- //
		//DiskOperation returns Operation:
		//    DiskMoveEmptySlotOperation | DiskMoveVariableSlotOperation | DiskMoveSlotOperation | DiskMarkSlotOperation | DiskWaitOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//DiskMoveEmptySlotOperation | DiskMoveVariableSlotOperation | DiskMoveSlotOperation | DiskMarkSlotOperation | DiskWaitOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DiskMoveEmptySlotOperation
		public RuleCall getDiskMoveEmptySlotOperationParserRuleCall_0() { return cDiskMoveEmptySlotOperationParserRuleCall_0; }
		
		//DiskMoveVariableSlotOperation
		public RuleCall getDiskMoveVariableSlotOperationParserRuleCall_1() { return cDiskMoveVariableSlotOperationParserRuleCall_1; }
		
		//DiskMoveSlotOperation
		public RuleCall getDiskMoveSlotOperationParserRuleCall_2() { return cDiskMoveSlotOperationParserRuleCall_2; }
		
		//DiskMarkSlotOperation
		public RuleCall getDiskMarkSlotOperationParserRuleCall_3() { return cDiskMarkSlotOperationParserRuleCall_3; }
		
		//DiskWaitOperation
		public RuleCall getDiskWaitOperationParserRuleCall_4() { return cDiskWaitOperationParserRuleCall_4; }
	}
	public class DiskMoveSlotOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskMoveSlotOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskMoveSlotOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeviceDiskCrossReference_1_0 = (CrossReference)cDeviceAssignment_1.eContents().get(0);
		private final RuleCall cDeviceDiskIDTerminalRuleCall_1_0_1 = (RuleCall)cDeviceDiskCrossReference_1_0.eContents().get(1);
		private final Keyword cMoveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSlotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceDiskZoneParameterCrossReference_5_0 = (CrossReference)cSourceAssignment_5.eContents().get(0);
		private final RuleCall cSourceDiskZoneParameterIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceDiskZoneParameterCrossReference_5_0.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetDiskZoneParameterCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetDiskZoneParameterIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetDiskZoneParameterCrossReference_7_0.eContents().get(1);
		
		//DiskMoveSlotOperation returns DiskOperation:
		//    {DiskMoveSlotOperation} device=[Disk] 'move' 'slot' 'at' source=[DiskZoneParameter] 'to'
		//    target=[DiskZoneParameter];
		@Override public ParserRule getRule() { return rule; }
		
		//{DiskMoveSlotOperation} device=[Disk] 'move' 'slot' 'at' source=[DiskZoneParameter] 'to'
		//target=[DiskZoneParameter]
		public Group getGroup() { return cGroup; }
		
		//{DiskMoveSlotOperation}
		public Action getDiskMoveSlotOperationAction_0() { return cDiskMoveSlotOperationAction_0; }
		
		//device=[Disk]
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//[Disk]
		public CrossReference getDeviceDiskCrossReference_1_0() { return cDeviceDiskCrossReference_1_0; }
		
		//ID
		public RuleCall getDeviceDiskIDTerminalRuleCall_1_0_1() { return cDeviceDiskIDTerminalRuleCall_1_0_1; }
		
		//'move'
		public Keyword getMoveKeyword_2() { return cMoveKeyword_2; }
		
		//'slot'
		public Keyword getSlotKeyword_3() { return cSlotKeyword_3; }
		
		//'at'
		public Keyword getAtKeyword_4() { return cAtKeyword_4; }
		
		//source=[DiskZoneParameter]
		public Assignment getSourceAssignment_5() { return cSourceAssignment_5; }
		
		//[DiskZoneParameter]
		public CrossReference getSourceDiskZoneParameterCrossReference_5_0() { return cSourceDiskZoneParameterCrossReference_5_0; }
		
		//ID
		public RuleCall getSourceDiskZoneParameterIDTerminalRuleCall_5_0_1() { return cSourceDiskZoneParameterIDTerminalRuleCall_5_0_1; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//target=[DiskZoneParameter]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//[DiskZoneParameter]
		public CrossReference getTargetDiskZoneParameterCrossReference_7_0() { return cTargetDiskZoneParameterCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetDiskZoneParameterIDTerminalRuleCall_7_0_1() { return cTargetDiskZoneParameterIDTerminalRuleCall_7_0_1; }
	}
	public class DiskMoveVariableSlotOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskMoveVariableSlotOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskMoveVariableSlotOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeviceDiskCrossReference_1_0 = (CrossReference)cDeviceAssignment_1.eContents().get(0);
		private final RuleCall cDeviceDiskIDTerminalRuleCall_1_0_1 = (RuleCall)cDeviceDiskCrossReference_1_0.eContents().get(1);
		private final Keyword cMoveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSlotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cVariableVariableCrossReference_5_0 = (CrossReference)cVariableAssignment_5.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_5_0_1 = (RuleCall)cVariableVariableCrossReference_5_0.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetDiskZoneParameterCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetDiskZoneParameterIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetDiskZoneParameterCrossReference_7_0.eContents().get(1);
		
		//DiskMoveVariableSlotOperation returns DiskOperation:
		//    {DiskMoveVariableSlotOperation} device=[Disk] 'move' 'slot' 'of' variable=[Variable] 'to'
		//    target=[DiskZoneParameter];
		@Override public ParserRule getRule() { return rule; }
		
		//{DiskMoveVariableSlotOperation} device=[Disk] 'move' 'slot' 'of' variable=[Variable] 'to'
		//target=[DiskZoneParameter]
		public Group getGroup() { return cGroup; }
		
		//{DiskMoveVariableSlotOperation}
		public Action getDiskMoveVariableSlotOperationAction_0() { return cDiskMoveVariableSlotOperationAction_0; }
		
		//device=[Disk]
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//[Disk]
		public CrossReference getDeviceDiskCrossReference_1_0() { return cDeviceDiskCrossReference_1_0; }
		
		//ID
		public RuleCall getDeviceDiskIDTerminalRuleCall_1_0_1() { return cDeviceDiskIDTerminalRuleCall_1_0_1; }
		
		//'move'
		public Keyword getMoveKeyword_2() { return cMoveKeyword_2; }
		
		//'slot'
		public Keyword getSlotKeyword_3() { return cSlotKeyword_3; }
		
		//'of'
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_5() { return cVariableAssignment_5; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_5_0() { return cVariableVariableCrossReference_5_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_5_0_1() { return cVariableVariableIDTerminalRuleCall_5_0_1; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//target=[DiskZoneParameter]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//[DiskZoneParameter]
		public CrossReference getTargetDiskZoneParameterCrossReference_7_0() { return cTargetDiskZoneParameterCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetDiskZoneParameterIDTerminalRuleCall_7_0_1() { return cTargetDiskZoneParameterIDTerminalRuleCall_7_0_1; }
	}
	public class DiskMoveEmptySlotOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskMoveEmptySlotOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskMoveEmptySlotOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeviceDiskCrossReference_1_0 = (CrossReference)cDeviceAssignment_1.eContents().get(0);
		private final RuleCall cDeviceDiskIDTerminalRuleCall_1_0_1 = (RuleCall)cDeviceDiskCrossReference_1_0.eContents().get(1);
		private final Keyword cMoveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEmptyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSlotKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetDiskZoneParameterCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetDiskZoneParameterIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetDiskZoneParameterCrossReference_6_0.eContents().get(1);
		
		//DiskMoveEmptySlotOperation returns DiskOperation:
		//    {DiskMoveEmptySlotOperation} device=[Disk] 'move' 'empty' 'slot' 'to' target=[DiskZoneParameter];
		@Override public ParserRule getRule() { return rule; }
		
		//{DiskMoveEmptySlotOperation} device=[Disk] 'move' 'empty' 'slot' 'to' target=[DiskZoneParameter]
		public Group getGroup() { return cGroup; }
		
		//{DiskMoveEmptySlotOperation}
		public Action getDiskMoveEmptySlotOperationAction_0() { return cDiskMoveEmptySlotOperationAction_0; }
		
		//device=[Disk]
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//[Disk]
		public CrossReference getDeviceDiskCrossReference_1_0() { return cDeviceDiskCrossReference_1_0; }
		
		//ID
		public RuleCall getDeviceDiskIDTerminalRuleCall_1_0_1() { return cDeviceDiskIDTerminalRuleCall_1_0_1; }
		
		//'move'
		public Keyword getMoveKeyword_2() { return cMoveKeyword_2; }
		
		//'empty'
		public Keyword getEmptyKeyword_3() { return cEmptyKeyword_3; }
		
		//'slot'
		public Keyword getSlotKeyword_4() { return cSlotKeyword_4; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//target=[DiskZoneParameter]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[DiskZoneParameter]
		public CrossReference getTargetDiskZoneParameterCrossReference_6_0() { return cTargetDiskZoneParameterCrossReference_6_0; }
		
		//ID
		public RuleCall getTargetDiskZoneParameterIDTerminalRuleCall_6_0_1() { return cTargetDiskZoneParameterIDTerminalRuleCall_6_0_1; }
	}
	public class DiskMarkSlotOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskMarkSlotOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskMarkSlotOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeviceDiskCrossReference_1_0 = (CrossReference)cDeviceAssignment_1.eContents().get(0);
		private final RuleCall cDeviceDiskIDTerminalRuleCall_1_0_1 = (RuleCall)cDeviceDiskCrossReference_1_0.eContents().get(1);
		private final Keyword cMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSlotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAtKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetDiskZoneParameterCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetDiskZoneParameterIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetDiskZoneParameterCrossReference_5_0.eContents().get(1);
		private final Keyword cAsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDiskSlotValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDiskSlotValueDiskSlotValueParserRuleCall_7_0 = (RuleCall)cDiskSlotValueAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cInKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cQuantityAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cQuantityINTTerminalRuleCall_8_1_0 = (RuleCall)cQuantityAssignment_8_1.eContents().get(0);
		private final Assignment cMeasureAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cMeasureTIMEEnumRuleCall_8_2_0 = (RuleCall)cMeasureAssignment_8_2.eContents().get(0);
		
		//DiskMarkSlotOperation returns DiskOperation:
		//    {DiskMarkSlotOperation} device=[Disk] 'mark' 'slot' 'at' target=[DiskZoneParameter] 'as'
		//    diskSlotValue=DiskSlotValue ('in' quantity=INT measure=TIME)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DiskMarkSlotOperation} device=[Disk] 'mark' 'slot' 'at' target=[DiskZoneParameter] 'as'
		//diskSlotValue=DiskSlotValue ('in' quantity=INT measure=TIME)?
		public Group getGroup() { return cGroup; }
		
		//{DiskMarkSlotOperation}
		public Action getDiskMarkSlotOperationAction_0() { return cDiskMarkSlotOperationAction_0; }
		
		//device=[Disk]
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//[Disk]
		public CrossReference getDeviceDiskCrossReference_1_0() { return cDeviceDiskCrossReference_1_0; }
		
		//ID
		public RuleCall getDeviceDiskIDTerminalRuleCall_1_0_1() { return cDeviceDiskIDTerminalRuleCall_1_0_1; }
		
		//'mark'
		public Keyword getMarkKeyword_2() { return cMarkKeyword_2; }
		
		//'slot'
		public Keyword getSlotKeyword_3() { return cSlotKeyword_3; }
		
		//'at'
		public Keyword getAtKeyword_4() { return cAtKeyword_4; }
		
		//target=[DiskZoneParameter]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[DiskZoneParameter]
		public CrossReference getTargetDiskZoneParameterCrossReference_5_0() { return cTargetDiskZoneParameterCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetDiskZoneParameterIDTerminalRuleCall_5_0_1() { return cTargetDiskZoneParameterIDTerminalRuleCall_5_0_1; }
		
		//'as'
		public Keyword getAsKeyword_6() { return cAsKeyword_6; }
		
		//diskSlotValue=DiskSlotValue
		public Assignment getDiskSlotValueAssignment_7() { return cDiskSlotValueAssignment_7; }
		
		//DiskSlotValue
		public RuleCall getDiskSlotValueDiskSlotValueParserRuleCall_7_0() { return cDiskSlotValueDiskSlotValueParserRuleCall_7_0; }
		
		//('in' quantity=INT measure=TIME)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'in'
		public Keyword getInKeyword_8_0() { return cInKeyword_8_0; }
		
		//quantity=INT
		public Assignment getQuantityAssignment_8_1() { return cQuantityAssignment_8_1; }
		
		//INT
		public RuleCall getQuantityINTTerminalRuleCall_8_1_0() { return cQuantityINTTerminalRuleCall_8_1_0; }
		
		//measure=TIME
		public Assignment getMeasureAssignment_8_2() { return cMeasureAssignment_8_2; }
		
		//TIME
		public RuleCall getMeasureTIMEEnumRuleCall_8_2_0() { return cMeasureTIMEEnumRuleCall_8_2_0; }
	}
	public class DiskWaitOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskWaitOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiskWaitOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeviceDiskCrossReference_1_0 = (CrossReference)cDeviceAssignment_1.eContents().get(0);
		private final RuleCall cDeviceDiskIDTerminalRuleCall_1_0_1 = (RuleCall)cDeviceDiskCrossReference_1_0.eContents().get(1);
		private final Keyword cWaitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cItemKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DiskWaitOperation returns DiskOperation:
		//    {DiskWaitOperation} device=[Disk] 'wait' 'for' 'new' 'item';
		@Override public ParserRule getRule() { return rule; }
		
		//{DiskWaitOperation} device=[Disk] 'wait' 'for' 'new' 'item'
		public Group getGroup() { return cGroup; }
		
		//{DiskWaitOperation}
		public Action getDiskWaitOperationAction_0() { return cDiskWaitOperationAction_0; }
		
		//device=[Disk]
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//[Disk]
		public CrossReference getDeviceDiskCrossReference_1_0() { return cDeviceDiskCrossReference_1_0; }
		
		//ID
		public RuleCall getDeviceDiskIDTerminalRuleCall_1_0_1() { return cDeviceDiskIDTerminalRuleCall_1_0_1; }
		
		//'wait'
		public Keyword getWaitKeyword_2() { return cWaitKeyword_2; }
		
		//'for'
		public Keyword getForKeyword_3() { return cForKeyword_3; }
		
		//'new'
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }
		
		//'item'
		public Keyword getItemKeyword_5() { return cItemKeyword_5; }
	}
	public class CameraOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CameraOperation");
		private final RuleCall cCameraScanOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// ----- STATEMENTS:OPERATIONS:CAMERA ----- //
		//CameraOperation returns Operation:
		//    CameraScanOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//CameraScanOperation
		public RuleCall getCameraScanOperationParserRuleCall() { return cCameraScanOperationParserRuleCall; }
	}
	public class CameraScanOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.CameraScanOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCameraScanOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeviceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeviceCameraCrossReference_1_0 = (CrossReference)cDeviceAssignment_1.eContents().get(0);
		private final RuleCall cDeviceCameraIDTerminalRuleCall_1_0_1 = (RuleCall)cDeviceCameraCrossReference_1_0.eContents().get(1);
		private final Keyword cScanKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIntoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVariableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVariableGlobalVariableParserRuleCall_5_0 = (RuleCall)cVariableAssignment_5.eContents().get(0);
		
		//CameraScanOperation returns CameraOperation:
		//    {CameraScanOperation} device=[Camera] 'scan' 'color' 'into' variable=GlobalVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//{CameraScanOperation} device=[Camera] 'scan' 'color' 'into' variable=GlobalVariable
		public Group getGroup() { return cGroup; }
		
		//{CameraScanOperation}
		public Action getCameraScanOperationAction_0() { return cCameraScanOperationAction_0; }
		
		//device=[Camera]
		public Assignment getDeviceAssignment_1() { return cDeviceAssignment_1; }
		
		//[Camera]
		public CrossReference getDeviceCameraCrossReference_1_0() { return cDeviceCameraCrossReference_1_0; }
		
		//ID
		public RuleCall getDeviceCameraIDTerminalRuleCall_1_0_1() { return cDeviceCameraIDTerminalRuleCall_1_0_1; }
		
		//'scan'
		public Keyword getScanKeyword_2() { return cScanKeyword_2; }
		
		//'color'
		public Keyword getColorKeyword_3() { return cColorKeyword_3; }
		
		//'into'
		public Keyword getIntoKeyword_4() { return cIntoKeyword_4; }
		
		//variable=GlobalVariable
		public Assignment getVariableAssignment_5() { return cVariableAssignment_5; }
		
		//GlobalVariable
		public RuleCall getVariableGlobalVariableParserRuleCall_5_0() { return cVariableGlobalVariableParserRuleCall_5_0; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Loop");
		private final RuleCall cForEachParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// ----- STATEMENTS:LOOPS ----- //
		//Loop returns Statement:
		//    ForEach;
		@Override public ParserRule getRule() { return rule; }
		
		//ForEach
		public RuleCall getForEachParserRuleCall() { return cForEachParserRuleCall; }
	}
	public class ForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.ForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForEachAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEachKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableLocalVariableParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeviceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cDeviceDeviceCrossReference_5_0 = (CrossReference)cDeviceAssignment_5.eContents().get(0);
		private final RuleCall cDeviceDeviceIDTerminalRuleCall_5_0_1 = (RuleCall)cDeviceDeviceCrossReference_5_0.eContents().get(1);
		private final Keyword cThatKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOperatorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cOperatorNotKeyword_8_0 = (Keyword)cOperatorAssignment_8.eContents().get(0);
		private final Assignment cVariableValueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cVariableValueVariableValueParserRuleCall_9_0 = (RuleCall)cVariableValueAssignment_9.eContents().get(0);
		private final Keyword cThenKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cBEGINTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cStatementsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cStatementsStatementParserRuleCall_12_0 = (RuleCall)cStatementsAssignment_12.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//// ----- STATEMENTS:LOOPS:FOREACH ----- //
		//ForEach returns Loop:
		//    {ForEach} 'for' 'each' variable=LocalVariable 'in' device=[Device] 'that' 'is' (operator='not')?
		//    variableValue=VariableValue
		//    'then' BEGIN statements+=Statement* END;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForEach} 'for' 'each' variable=LocalVariable 'in' device=[Device] 'that' 'is' (operator='not')?
		//variableValue=VariableValue
		//'then' BEGIN statements+=Statement* END
		public Group getGroup() { return cGroup; }
		
		//{ForEach}
		public Action getForEachAction_0() { return cForEachAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'each'
		public Keyword getEachKeyword_2() { return cEachKeyword_2; }
		
		//variable=LocalVariable
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//LocalVariable
		public RuleCall getVariableLocalVariableParserRuleCall_3_0() { return cVariableLocalVariableParserRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//device=[Device]
		public Assignment getDeviceAssignment_5() { return cDeviceAssignment_5; }
		
		//[Device]
		public CrossReference getDeviceDeviceCrossReference_5_0() { return cDeviceDeviceCrossReference_5_0; }
		
		//ID
		public RuleCall getDeviceDeviceIDTerminalRuleCall_5_0_1() { return cDeviceDeviceIDTerminalRuleCall_5_0_1; }
		
		//'that'
		public Keyword getThatKeyword_6() { return cThatKeyword_6; }
		
		//'is'
		public Keyword getIsKeyword_7() { return cIsKeyword_7; }
		
		//(operator='not')?
		public Assignment getOperatorAssignment_8() { return cOperatorAssignment_8; }
		
		//'not'
		public Keyword getOperatorNotKeyword_8_0() { return cOperatorNotKeyword_8_0; }
		
		//variableValue=VariableValue
		public Assignment getVariableValueAssignment_9() { return cVariableValueAssignment_9; }
		
		//VariableValue
		public RuleCall getVariableValueVariableValueParserRuleCall_9_0() { return cVariableValueVariableValueParserRuleCall_9_0; }
		
		//'then'
		public Keyword getThenKeyword_10() { return cThenKeyword_10; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_11() { return cBEGINTerminalRuleCall_11; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_12() { return cStatementsAssignment_12; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_12_0() { return cStatementsStatementParserRuleCall_12_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_13() { return cENDTerminalRuleCall_13; }
	}
	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// ----- VARIABLES ----- //
		//LocalVariable returns Variable:
		//    {LocalVariable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{LocalVariable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{LocalVariable}
		public Action getLocalVariableAction_0() { return cLocalVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GlobalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.GlobalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GlobalVariable returns Variable:
		//    {GlobalVariable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalVariable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{GlobalVariable}
		public Action getGlobalVariableAction_0() { return cGlobalVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DeviceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DeviceValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueDiskStateValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueColorValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cRefAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cRefParameterCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefParameterIDTerminalRuleCall_2_0_1 = (RuleCall)cRefParameterCrossReference_2_0.eContents().get(1);
		
		//// ----- VALUE TYPES ----- //
		//DeviceValue:
		//    value=DiskStateValue | value=ColorValue | ref=[Parameter];
		@Override public ParserRule getRule() { return rule; }
		
		//value=DiskStateValue | value=ColorValue | ref=[Parameter]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=DiskStateValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//DiskStateValue
		public RuleCall getValueDiskStateValueParserRuleCall_0_0() { return cValueDiskStateValueParserRuleCall_0_0; }
		
		//value=ColorValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ColorValue
		public RuleCall getValueColorValueParserRuleCall_1_0() { return cValueColorValueParserRuleCall_1_0; }
		
		//ref=[Parameter]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }
		
		//[Parameter]
		public CrossReference getRefParameterCrossReference_2_0() { return cRefParameterCrossReference_2_0; }
		
		//ID
		public RuleCall getRefParameterIDTerminalRuleCall_2_0_1() { return cRefParameterIDTerminalRuleCall_2_0_1; }
	}
	public class DiskSlotValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskSlotValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueDiskSlotStateValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueColorValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cRefAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cRefVariableCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cRefVariableCrossReference_2_0.eContents().get(1);
		
		//DiskSlotValue:
		//    value=DiskSlotStateValue | value=ColorValue | ref=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//value=DiskSlotStateValue | value=ColorValue | ref=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=DiskSlotStateValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//DiskSlotStateValue
		public RuleCall getValueDiskSlotStateValueParserRuleCall_0_0() { return cValueDiskSlotStateValueParserRuleCall_0_0; }
		
		//value=ColorValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ColorValue
		public RuleCall getValueColorValueParserRuleCall_1_0() { return cValueColorValueParserRuleCall_1_0; }
		
		//ref=[Variable]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_2_0() { return cRefVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_2_0_1() { return cRefVariableIDTerminalRuleCall_2_0_1; }
	}
	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.VariableValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueDiskSlotStateValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueColorValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueNumberParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueDiskStateValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cRefAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final CrossReference cRefVariableCrossReference_4_0 = (CrossReference)cRefAssignment_4.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_4_0_1 = (RuleCall)cRefVariableCrossReference_4_0.eContents().get(1);
		
		//VariableValue:
		//    value=DiskSlotStateValue | value=ColorValue | value=Number | value=DiskStateValue | ref=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//value=DiskSlotStateValue | value=ColorValue | value=Number | value=DiskStateValue | ref=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=DiskSlotStateValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//DiskSlotStateValue
		public RuleCall getValueDiskSlotStateValueParserRuleCall_0_0() { return cValueDiskSlotStateValueParserRuleCall_0_0; }
		
		//value=ColorValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ColorValue
		public RuleCall getValueColorValueParserRuleCall_1_0() { return cValueColorValueParserRuleCall_1_0; }
		
		//value=Number
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_2_0() { return cValueNumberParserRuleCall_2_0; }
		
		//value=DiskStateValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//DiskStateValue
		public RuleCall getValueDiskStateValueParserRuleCall_3_0() { return cValueDiskStateValueParserRuleCall_3_0; }
		
		//ref=[Variable]
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_4_0() { return cRefVariableCrossReference_4_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_4_0_1() { return cRefVariableIDTerminalRuleCall_4_0_1; }
	}
	public class DiskStateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskStateValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDISK_STATESEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// ----- VALUE TYPES:ACTUAL VALUES ----- //
		//DiskStateValue:
		//    value=DISK_STATES;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DISK_STATES
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DISK_STATES
		public RuleCall getValueDISK_STATESEnumRuleCall_0() { return cValueDISK_STATESEnumRuleCall_0; }
	}
	public class DiskSlotStateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DiskSlotStateValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDISK_SLOT_STATESEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DiskSlotStateValue:
		//    value=DISK_SLOT_STATES;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DISK_SLOT_STATES
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DISK_SLOT_STATES
		public RuleCall getValueDISK_SLOT_STATESEnumRuleCall_0() { return cValueDISK_SLOT_STATESEnumRuleCall_0; }
	}
	public class ColorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.ColorValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCOLOREnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ColorValue:
		//    value=COLOR;
		@Override public ParserRule getRule() { return rule; }
		
		//value=COLOR
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//COLOR
		public RuleCall getValueCOLOREnumRuleCall_0() { return cValueCOLOREnumRuleCall_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Number:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	public class COMPARISON_OPERATORElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.COMPARISON_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNDEFINEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNDEFINEDUndefinedKeyword_0_0 = (Keyword)cUNDEFINEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_THANLessThanKeyword_1_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_THANGreaterThanKeyword_2_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNOTNotKeyword_3_0 = (Keyword)cNOTEnumLiteralDeclaration_3.eContents().get(0);
		
		//// ----- SHARED ENUMS ----- //
		//enum COMPARISON_OPERATOR:
		//    UNDEFINED='undefined' | LESS_THAN='less than' | GREATER_THAN='greater than' | NOT='not';
		public EnumRule getRule() { return rule; }
		
		//UNDEFINED='undefined' | LESS_THAN='less than' | GREATER_THAN='greater than' | NOT='not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNDEFINED='undefined'
		public EnumLiteralDeclaration getUNDEFINEDEnumLiteralDeclaration_0() { return cUNDEFINEDEnumLiteralDeclaration_0; }
		
		//'undefined'
		public Keyword getUNDEFINEDUndefinedKeyword_0_0() { return cUNDEFINEDUndefinedKeyword_0_0; }
		
		//LESS_THAN='less than'
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_1() { return cLESS_THANEnumLiteralDeclaration_1; }
		
		//'less than'
		public Keyword getLESS_THANLessThanKeyword_1_0() { return cLESS_THANLessThanKeyword_1_0; }
		
		//GREATER_THAN='greater than'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_2() { return cGREATER_THANEnumLiteralDeclaration_2; }
		
		//'greater than'
		public Keyword getGREATER_THANGreaterThanKeyword_2_0() { return cGREATER_THANGreaterThanKeyword_2_0; }
		
		//NOT='not'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_3() { return cNOTEnumLiteralDeclaration_3; }
		
		//'not'
		public Keyword getNOTNotKeyword_3_0() { return cNOTNotKeyword_3_0; }
	}
	public class COLORElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.COLOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREENGreenKeyword_1_0 = (Keyword)cGREENEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBlueKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum COLOR:
		//    RED='red' | GREEN='green' | BLUE='blue';
		public EnumRule getRule() { return rule; }
		
		//RED='red' | GREEN='green' | BLUE='blue'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RED='red'
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }
		
		//GREEN='green'
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_1() { return cGREENEnumLiteralDeclaration_1; }
		
		//'green'
		public Keyword getGREENGreenKeyword_1_0() { return cGREENGreenKeyword_1_0; }
		
		//BLUE='blue'
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }
		
		//'blue'
		public Keyword getBLUEBlueKeyword_2_0() { return cBLUEBlueKeyword_2_0; }
	}
	public class DISK_SLOT_STATESElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DISK_SLOT_STATES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFREEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFREEFreeKeyword_0_0 = (Keyword)cFREEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIN_PROGRESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIN_PROGRESSIn_progressKeyword_1_0 = (Keyword)cIN_PROGRESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLETEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMPLETECompleteKeyword_2_0 = (Keyword)cCOMPLETEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DISK_SLOT_STATES:
		//    FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete';
		public EnumRule getRule() { return rule; }
		
		//FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FREE='free'
		public EnumLiteralDeclaration getFREEEnumLiteralDeclaration_0() { return cFREEEnumLiteralDeclaration_0; }
		
		//'free'
		public Keyword getFREEFreeKeyword_0_0() { return cFREEFreeKeyword_0_0; }
		
		//IN_PROGRESS='in_progress'
		public EnumLiteralDeclaration getIN_PROGRESSEnumLiteralDeclaration_1() { return cIN_PROGRESSEnumLiteralDeclaration_1; }
		
		//'in_progress'
		public Keyword getIN_PROGRESSIn_progressKeyword_1_0() { return cIN_PROGRESSIn_progressKeyword_1_0; }
		
		//COMPLETE='complete'
		public EnumLiteralDeclaration getCOMPLETEEnumLiteralDeclaration_2() { return cCOMPLETEEnumLiteralDeclaration_2; }
		
		//'complete'
		public Keyword getCOMPLETECompleteKeyword_2_0() { return cCOMPLETECompleteKeyword_2_0; }
	}
	public class DISK_STATESElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.DISK_STATES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFULLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFULLFullKeyword_0_0 = (Keyword)cFULLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEMPTYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEMPTYEmptyKeyword_1_0 = (Keyword)cEMPTYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DISK_STATES:
		//    FULL='full' | EMPTY='empty';
		public EnumRule getRule() { return rule; }
		
		//FULL='full' | EMPTY='empty'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FULL='full'
		public EnumLiteralDeclaration getFULLEnumLiteralDeclaration_0() { return cFULLEnumLiteralDeclaration_0; }
		
		//'full'
		public Keyword getFULLFullKeyword_0_0() { return cFULLFullKeyword_0_0; }
		
		//EMPTY='empty'
		public EnumLiteralDeclaration getEMPTYEnumLiteralDeclaration_1() { return cEMPTYEnumLiteralDeclaration_1; }
		
		//'empty'
		public Keyword getEMPTYEmptyKeyword_1_0() { return cEMPTYEmptyKeyword_1_0; }
	}
	public class TIMEElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.TIME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSSecondsKeyword_0_0 = (Keyword)cSECONDSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSECONDSecondKeyword_1_0 = (Keyword)cSECONDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUTESMinutesKeyword_2_0 = (Keyword)cMINUTESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMINUTEMinuteKeyword_3_0 = (Keyword)cMINUTEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cHOURSHoursKeyword_4_0 = (Keyword)cHOURSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHOURHourKeyword_5_0 = (Keyword)cHOUREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TIME:
		//    SECONDS='seconds' | SECOND='second' | MINUTES='minutes' | MINUTE='minute' | HOURS='hours' | HOUR='hour';
		public EnumRule getRule() { return rule; }
		
		//SECONDS='seconds' | SECOND='second' | MINUTES='minutes' | MINUTE='minute' | HOURS='hours' | HOUR='hour'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECONDS='seconds'
		public EnumLiteralDeclaration getSECONDSEnumLiteralDeclaration_0() { return cSECONDSEnumLiteralDeclaration_0; }
		
		//'seconds'
		public Keyword getSECONDSSecondsKeyword_0_0() { return cSECONDSSecondsKeyword_0_0; }
		
		//SECOND='second'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_1() { return cSECONDEnumLiteralDeclaration_1; }
		
		//'second'
		public Keyword getSECONDSecondKeyword_1_0() { return cSECONDSecondKeyword_1_0; }
		
		//MINUTES='minutes'
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_2() { return cMINUTESEnumLiteralDeclaration_2; }
		
		//'minutes'
		public Keyword getMINUTESMinutesKeyword_2_0() { return cMINUTESMinutesKeyword_2_0; }
		
		//MINUTE='minute'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_3() { return cMINUTEEnumLiteralDeclaration_3; }
		
		//'minute'
		public Keyword getMINUTEMinuteKeyword_3_0() { return cMINUTEMinuteKeyword_3_0; }
		
		//HOURS='hours'
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_4() { return cHOURSEnumLiteralDeclaration_4; }
		
		//'hours'
		public Keyword getHOURSHoursKeyword_4_0() { return cHOURSHoursKeyword_4_0; }
		
		//HOUR='hour'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_5() { return cHOUREnumLiteralDeclaration_5; }
		
		//'hour'
		public Keyword getHOURHourKeyword_5_0() { return cHOURHourKeyword_5_0; }
	}
	
	private final ModelElements pModel;
	private final ConfigurationElements pConfiguration;
	private final DeviceElements pDevice;
	private final CraneElements pCrane;
	private final CraneParameterElements pCraneParameter;
	private final CranePositionParameterElements pCranePositionParameter;
	private final DiskElements pDisk;
	private final DiskParameterElements pDiskParameter;
	private final DiskSlotParameterElements pDiskSlotParameter;
	private final DiskZoneParameterElements pDiskZoneParameter;
	private final CameraElements pCamera;
	private final CameraParameterElements pCameraParameter;
	private final CameraColorParameterElements pCameraColorParameter;
	private final StatementElements pStatement;
	private final ConditionalElements pConditional;
	private final DeviceConditionalElements pDeviceConditional;
	private final VariableConditionalElements pVariableConditional;
	private final OperationElements pOperation;
	private final CraneOperationElements pCraneOperation;
	private final CranePickupOperationElements pCranePickupOperation;
	private final CraneDropOperationElements pCraneDropOperation;
	private final DiskOperationElements pDiskOperation;
	private final DiskMoveSlotOperationElements pDiskMoveSlotOperation;
	private final DiskMoveVariableSlotOperationElements pDiskMoveVariableSlotOperation;
	private final DiskMoveEmptySlotOperationElements pDiskMoveEmptySlotOperation;
	private final DiskMarkSlotOperationElements pDiskMarkSlotOperation;
	private final DiskWaitOperationElements pDiskWaitOperation;
	private final CameraOperationElements pCameraOperation;
	private final CameraScanOperationElements pCameraScanOperation;
	private final LoopElements pLoop;
	private final ForEachElements pForEach;
	private final LocalVariableElements pLocalVariable;
	private final GlobalVariableElements pGlobalVariable;
	private final DeviceValueElements pDeviceValue;
	private final DiskSlotValueElements pDiskSlotValue;
	private final VariableValueElements pVariableValue;
	private final DiskStateValueElements pDiskStateValue;
	private final DiskSlotStateValueElements pDiskSlotStateValue;
	private final ColorValueElements pColorValue;
	private final NumberElements pNumber;
	private final COMPARISON_OPERATORElements eCOMPARISON_OPERATOR;
	private final COLORElements eCOLOR;
	private final DISK_SLOT_STATESElements eDISK_SLOT_STATES;
	private final DISK_STATESElements eDISK_STATES;
	private final TIMEElements eTIME;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FactoryLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConfiguration = new ConfigurationElements();
		this.pDevice = new DeviceElements();
		this.pCrane = new CraneElements();
		this.pCraneParameter = new CraneParameterElements();
		this.pCranePositionParameter = new CranePositionParameterElements();
		this.pDisk = new DiskElements();
		this.pDiskParameter = new DiskParameterElements();
		this.pDiskSlotParameter = new DiskSlotParameterElements();
		this.pDiskZoneParameter = new DiskZoneParameterElements();
		this.pCamera = new CameraElements();
		this.pCameraParameter = new CameraParameterElements();
		this.pCameraColorParameter = new CameraColorParameterElements();
		this.pStatement = new StatementElements();
		this.pConditional = new ConditionalElements();
		this.pDeviceConditional = new DeviceConditionalElements();
		this.pVariableConditional = new VariableConditionalElements();
		this.pOperation = new OperationElements();
		this.pCraneOperation = new CraneOperationElements();
		this.pCranePickupOperation = new CranePickupOperationElements();
		this.pCraneDropOperation = new CraneDropOperationElements();
		this.pDiskOperation = new DiskOperationElements();
		this.pDiskMoveSlotOperation = new DiskMoveSlotOperationElements();
		this.pDiskMoveVariableSlotOperation = new DiskMoveVariableSlotOperationElements();
		this.pDiskMoveEmptySlotOperation = new DiskMoveEmptySlotOperationElements();
		this.pDiskMarkSlotOperation = new DiskMarkSlotOperationElements();
		this.pDiskWaitOperation = new DiskWaitOperationElements();
		this.pCameraOperation = new CameraOperationElements();
		this.pCameraScanOperation = new CameraScanOperationElements();
		this.pLoop = new LoopElements();
		this.pForEach = new ForEachElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pGlobalVariable = new GlobalVariableElements();
		this.pDeviceValue = new DeviceValueElements();
		this.pDiskSlotValue = new DiskSlotValueElements();
		this.pVariableValue = new VariableValueElements();
		this.pDiskStateValue = new DiskStateValueElements();
		this.pDiskSlotStateValue = new DiskSlotStateValueElements();
		this.pColorValue = new ColorValueElements();
		this.pNumber = new NumberElements();
		this.eCOMPARISON_OPERATOR = new COMPARISON_OPERATORElements();
		this.eCOLOR = new COLORElements();
		this.eDISK_SLOT_STATES = new DISK_SLOT_STATESElements();
		this.eDISK_STATES = new DISK_STATESElements();
		this.eTIME = new TIMEElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.factoryLang.FactoryLang.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.factoryLang.FactoryLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    configurations+=Configuration+ statements+=Statement+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// ----- CONFIGURATION ----- //
	//Configuration:
	//    'create' device=Device;
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Device:
	//    Crane | Disk | Camera;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//// ----- CONFIGURATION:CRANE ----- //
	//Crane returns Device:
	//    {Crane} 'crane' 'named' name=ID BEGIN targets+=CraneParameter+ END;
	public CraneElements getCraneAccess() {
		return pCrane;
	}
	
	public ParserRule getCraneRule() {
		return getCraneAccess().getRule();
	}
	
	//CraneParameter returns Parameter:
	//    CranePositionParameter;
	public CraneParameterElements getCraneParameterAccess() {
		return pCraneParameter;
	}
	
	public ParserRule getCraneParameterRule() {
		return getCraneParameterAccess().getRule();
	}
	
	//CranePositionParameter returns CraneParameter:
	//    {CranePositionParameter} 'with' 'position' 'at' degree=INT 'named' name=ID;
	public CranePositionParameterElements getCranePositionParameterAccess() {
		return pCranePositionParameter;
	}
	
	public ParserRule getCranePositionParameterRule() {
		return getCranePositionParameterAccess().getRule();
	}
	
	//// ----- CONFIGURATION:DISK ----- //
	//Disk returns Device:
	//    {Disk} 'disk' 'named' name=ID BEGIN slotParameter=DiskSlotParameter targets+=DiskParameter+ END;
	public DiskElements getDiskAccess() {
		return pDisk;
	}
	
	public ParserRule getDiskRule() {
		return getDiskAccess().getRule();
	}
	
	//DiskParameter returns Parameter:
	//    DiskZoneParameter;
	public DiskParameterElements getDiskParameterAccess() {
		return pDiskParameter;
	}
	
	public ParserRule getDiskParameterRule() {
		return getDiskParameterAccess().getRule();
	}
	
	//DiskSlotParameter returns DiskParameter:
	//    {DiskSlotParameter} 'with' size=INT 'slots';
	public DiskSlotParameterElements getDiskSlotParameterAccess() {
		return pDiskSlotParameter;
	}
	
	public ParserRule getDiskSlotParameterRule() {
		return getDiskSlotParameterAccess().getRule();
	}
	
	//DiskZoneParameter returns DiskParameter:
	//    {DiskZoneParameter} 'with' 'zone' 'named' name=ID 'at' 'slot' slot=INT;
	public DiskZoneParameterElements getDiskZoneParameterAccess() {
		return pDiskZoneParameter;
	}
	
	public ParserRule getDiskZoneParameterRule() {
		return getDiskZoneParameterAccess().getRule();
	}
	
	//// ----- CONFIGURATION:CAMERA ----- //
	//Camera returns Device:
	//    {Camera} 'camera' 'named' name=ID BEGIN targets+=CameraParameter+ END;
	public CameraElements getCameraAccess() {
		return pCamera;
	}
	
	public ParserRule getCameraRule() {
		return getCameraAccess().getRule();
	}
	
	//CameraParameter returns Parameter:
	//    CameraColorParameter;
	public CameraParameterElements getCameraParameterAccess() {
		return pCameraParameter;
	}
	
	public ParserRule getCameraParameterRule() {
		return getCameraParameterAccess().getRule();
	}
	
	//CameraColorParameter returns CameraParameter:
	//    {CameraColorParameter} 'with' 'scannable' 'color' color=COLOR;
	public CameraColorParameterElements getCameraColorParameterAccess() {
		return pCameraColorParameter;
	}
	
	public ParserRule getCameraColorParameterRule() {
		return getCameraColorParameterAccess().getRule();
	}
	
	//// ----- STATEMENTS ----- //
	//Statement:
	//    Conditional | Operation | Loop;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// ----- STATEMENTS:CONDITIONALS ----- //
	//Conditional returns Statement:
	//    DeviceConditional | VariableConditional;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//DeviceConditional returns Conditional:
	//    {DeviceConditional} 'if' 'device' device=[Device] 'is' (not_operator='not')? ('at')?
	//    deviceValue=DeviceValue
	//    'then' BEGIN statements+=Statement* END;
	public DeviceConditionalElements getDeviceConditionalAccess() {
		return pDeviceConditional;
	}
	
	public ParserRule getDeviceConditionalRule() {
		return getDeviceConditionalAccess().getRule();
	}
	
	//VariableConditional returns Conditional:
	//    {VariableConditional} 'if' 'variable' variable=[Variable] 'is'
	//    (comparison_operator=COMPARISON_OPERATOR)?
	//    variableValue=VariableValue
	//    'then' BEGIN statements+=Statement* END;
	public VariableConditionalElements getVariableConditionalAccess() {
		return pVariableConditional;
	}
	
	public ParserRule getVariableConditionalRule() {
		return getVariableConditionalAccess().getRule();
	}
	
	//// ----- STATEMENTS:OPERATIONS ----- //
	//Operation returns Statement:
	//    CraneOperation | DiskOperation | CameraOperation;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//// ----- STATEMENTS:OPERATIONS:CRANE ----- //
	//CraneOperation returns Operation:
	//    CranePickupOperation | CraneDropOperation;
	public CraneOperationElements getCraneOperationAccess() {
		return pCraneOperation;
	}
	
	public ParserRule getCraneOperationRule() {
		return getCraneOperationAccess().getRule();
	}
	
	//CranePickupOperation returns CraneOperation:
	//    {CranePickupOperation} device=[Crane] 'pickup' 'item' 'at' target=[CraneParameter];
	public CranePickupOperationElements getCranePickupOperationAccess() {
		return pCranePickupOperation;
	}
	
	public ParserRule getCranePickupOperationRule() {
		return getCranePickupOperationAccess().getRule();
	}
	
	//CraneDropOperation returns CraneOperation:
	//    {CraneDropOperation} device=[Crane] 'drop' 'item' 'at' target=[CraneParameter];
	public CraneDropOperationElements getCraneDropOperationAccess() {
		return pCraneDropOperation;
	}
	
	public ParserRule getCraneDropOperationRule() {
		return getCraneDropOperationAccess().getRule();
	}
	
	//// ----- STATEMENTS:OPERATIONS:DISK ----- //
	//DiskOperation returns Operation:
	//    DiskMoveEmptySlotOperation | DiskMoveVariableSlotOperation | DiskMoveSlotOperation | DiskMarkSlotOperation | DiskWaitOperation;
	public DiskOperationElements getDiskOperationAccess() {
		return pDiskOperation;
	}
	
	public ParserRule getDiskOperationRule() {
		return getDiskOperationAccess().getRule();
	}
	
	//DiskMoveSlotOperation returns DiskOperation:
	//    {DiskMoveSlotOperation} device=[Disk] 'move' 'slot' 'at' source=[DiskZoneParameter] 'to'
	//    target=[DiskZoneParameter];
	public DiskMoveSlotOperationElements getDiskMoveSlotOperationAccess() {
		return pDiskMoveSlotOperation;
	}
	
	public ParserRule getDiskMoveSlotOperationRule() {
		return getDiskMoveSlotOperationAccess().getRule();
	}
	
	//DiskMoveVariableSlotOperation returns DiskOperation:
	//    {DiskMoveVariableSlotOperation} device=[Disk] 'move' 'slot' 'of' variable=[Variable] 'to'
	//    target=[DiskZoneParameter];
	public DiskMoveVariableSlotOperationElements getDiskMoveVariableSlotOperationAccess() {
		return pDiskMoveVariableSlotOperation;
	}
	
	public ParserRule getDiskMoveVariableSlotOperationRule() {
		return getDiskMoveVariableSlotOperationAccess().getRule();
	}
	
	//DiskMoveEmptySlotOperation returns DiskOperation:
	//    {DiskMoveEmptySlotOperation} device=[Disk] 'move' 'empty' 'slot' 'to' target=[DiskZoneParameter];
	public DiskMoveEmptySlotOperationElements getDiskMoveEmptySlotOperationAccess() {
		return pDiskMoveEmptySlotOperation;
	}
	
	public ParserRule getDiskMoveEmptySlotOperationRule() {
		return getDiskMoveEmptySlotOperationAccess().getRule();
	}
	
	//DiskMarkSlotOperation returns DiskOperation:
	//    {DiskMarkSlotOperation} device=[Disk] 'mark' 'slot' 'at' target=[DiskZoneParameter] 'as'
	//    diskSlotValue=DiskSlotValue ('in' quantity=INT measure=TIME)?;
	public DiskMarkSlotOperationElements getDiskMarkSlotOperationAccess() {
		return pDiskMarkSlotOperation;
	}
	
	public ParserRule getDiskMarkSlotOperationRule() {
		return getDiskMarkSlotOperationAccess().getRule();
	}
	
	//DiskWaitOperation returns DiskOperation:
	//    {DiskWaitOperation} device=[Disk] 'wait' 'for' 'new' 'item';
	public DiskWaitOperationElements getDiskWaitOperationAccess() {
		return pDiskWaitOperation;
	}
	
	public ParserRule getDiskWaitOperationRule() {
		return getDiskWaitOperationAccess().getRule();
	}
	
	//// ----- STATEMENTS:OPERATIONS:CAMERA ----- //
	//CameraOperation returns Operation:
	//    CameraScanOperation;
	public CameraOperationElements getCameraOperationAccess() {
		return pCameraOperation;
	}
	
	public ParserRule getCameraOperationRule() {
		return getCameraOperationAccess().getRule();
	}
	
	//CameraScanOperation returns CameraOperation:
	//    {CameraScanOperation} device=[Camera] 'scan' 'color' 'into' variable=GlobalVariable;
	public CameraScanOperationElements getCameraScanOperationAccess() {
		return pCameraScanOperation;
	}
	
	public ParserRule getCameraScanOperationRule() {
		return getCameraScanOperationAccess().getRule();
	}
	
	//// ----- STATEMENTS:LOOPS ----- //
	//Loop returns Statement:
	//    ForEach;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//// ----- STATEMENTS:LOOPS:FOREACH ----- //
	//ForEach returns Loop:
	//    {ForEach} 'for' 'each' variable=LocalVariable 'in' device=[Device] 'that' 'is' (operator='not')?
	//    variableValue=VariableValue
	//    'then' BEGIN statements+=Statement* END;
	public ForEachElements getForEachAccess() {
		return pForEach;
	}
	
	public ParserRule getForEachRule() {
		return getForEachAccess().getRule();
	}
	
	//// ----- VARIABLES ----- //
	//LocalVariable returns Variable:
	//    {LocalVariable} name=ID;
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//GlobalVariable returns Variable:
	//    {GlobalVariable} name=ID;
	public GlobalVariableElements getGlobalVariableAccess() {
		return pGlobalVariable;
	}
	
	public ParserRule getGlobalVariableRule() {
		return getGlobalVariableAccess().getRule();
	}
	
	//// ----- VALUE TYPES ----- //
	//DeviceValue:
	//    value=DiskStateValue | value=ColorValue | ref=[Parameter];
	public DeviceValueElements getDeviceValueAccess() {
		return pDeviceValue;
	}
	
	public ParserRule getDeviceValueRule() {
		return getDeviceValueAccess().getRule();
	}
	
	//DiskSlotValue:
	//    value=DiskSlotStateValue | value=ColorValue | ref=[Variable];
	public DiskSlotValueElements getDiskSlotValueAccess() {
		return pDiskSlotValue;
	}
	
	public ParserRule getDiskSlotValueRule() {
		return getDiskSlotValueAccess().getRule();
	}
	
	//VariableValue:
	//    value=DiskSlotStateValue | value=ColorValue | value=Number | value=DiskStateValue | ref=[Variable];
	public VariableValueElements getVariableValueAccess() {
		return pVariableValue;
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}
	
	//// ----- VALUE TYPES:ACTUAL VALUES ----- //
	//DiskStateValue:
	//    value=DISK_STATES;
	public DiskStateValueElements getDiskStateValueAccess() {
		return pDiskStateValue;
	}
	
	public ParserRule getDiskStateValueRule() {
		return getDiskStateValueAccess().getRule();
	}
	
	//DiskSlotStateValue:
	//    value=DISK_SLOT_STATES;
	public DiskSlotStateValueElements getDiskSlotStateValueAccess() {
		return pDiskSlotStateValue;
	}
	
	public ParserRule getDiskSlotStateValueRule() {
		return getDiskSlotStateValueAccess().getRule();
	}
	
	//ColorValue:
	//    value=COLOR;
	public ColorValueElements getColorValueAccess() {
		return pColorValue;
	}
	
	public ParserRule getColorValueRule() {
		return getColorValueAccess().getRule();
	}
	
	//Number:
	//    value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//// ----- SHARED ENUMS ----- //
	//enum COMPARISON_OPERATOR:
	//    UNDEFINED='undefined' | LESS_THAN='less than' | GREATER_THAN='greater than' | NOT='not';
	public COMPARISON_OPERATORElements getCOMPARISON_OPERATORAccess() {
		return eCOMPARISON_OPERATOR;
	}
	
	public EnumRule getCOMPARISON_OPERATORRule() {
		return getCOMPARISON_OPERATORAccess().getRule();
	}
	
	//enum COLOR:
	//    RED='red' | GREEN='green' | BLUE='blue';
	public COLORElements getCOLORAccess() {
		return eCOLOR;
	}
	
	public EnumRule getCOLORRule() {
		return getCOLORAccess().getRule();
	}
	
	//enum DISK_SLOT_STATES:
	//    FREE='free' | IN_PROGRESS='in_progress' | COMPLETE='complete';
	public DISK_SLOT_STATESElements getDISK_SLOT_STATESAccess() {
		return eDISK_SLOT_STATES;
	}
	
	public EnumRule getDISK_SLOT_STATESRule() {
		return getDISK_SLOT_STATESAccess().getRule();
	}
	
	//enum DISK_STATES:
	//    FULL='full' | EMPTY='empty';
	public DISK_STATESElements getDISK_STATESAccess() {
		return eDISK_STATES;
	}
	
	public EnumRule getDISK_STATESRule() {
		return getDISK_STATESAccess().getRule();
	}
	
	//enum TIME:
	//    SECONDS='seconds' | SECOND='second' | MINUTES='minutes' | MINUTE='minute' | HOURS='hours' | HOUR='hour';
	public TIMEElements getTIMEAccess() {
		return eTIME;
	}
	
	public EnumRule getTIMERule() {
		return getTIMEAccess().getRule();
	}
	
	//// ----- TERMINALS ----- //
	//terminal BEGIN:
	//    'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//    'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
