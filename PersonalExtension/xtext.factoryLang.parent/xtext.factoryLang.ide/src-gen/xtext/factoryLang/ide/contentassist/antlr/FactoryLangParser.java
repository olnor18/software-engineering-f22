/*
 * generated by Xtext 2.26.0
 */
package xtext.factoryLang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.factoryLang.ide.contentassist.antlr.internal.InternalFactoryLangParser;
import xtext.factoryLang.services.FactoryLangGrammarAccess;

public class FactoryLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FactoryLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FactoryLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeviceAccess().getAlternatives(), "rule__Device__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getConditionalAccess().getAlternatives(), "rule__Conditional__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getCraneOperationAccess().getAlternatives(), "rule__CraneOperation__Alternatives");
			builder.put(grammarAccess.getDiskOperationAccess().getAlternatives(), "rule__DiskOperation__Alternatives");
			builder.put(grammarAccess.getDeviceValueAccess().getAlternatives(), "rule__DeviceValue__Alternatives");
			builder.put(grammarAccess.getDiskSlotValueAccess().getAlternatives(), "rule__DiskSlotValue__Alternatives");
			builder.put(grammarAccess.getVariableValueAccess().getAlternatives(), "rule__VariableValue__Alternatives");
			builder.put(grammarAccess.getCOMPARISON_OPERATORAccess().getAlternatives(), "rule__COMPARISON_OPERATOR__Alternatives");
			builder.put(grammarAccess.getCOLORAccess().getAlternatives(), "rule__COLOR__Alternatives");
			builder.put(grammarAccess.getDISK_SLOT_STATESAccess().getAlternatives(), "rule__DISK_SLOT_STATES__Alternatives");
			builder.put(grammarAccess.getDISK_STATESAccess().getAlternatives(), "rule__DISK_STATES__Alternatives");
			builder.put(grammarAccess.getTIMEAccess().getAlternatives(), "rule__TIME__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
			builder.put(grammarAccess.getCraneAccess().getGroup(), "rule__Crane__Group__0");
			builder.put(grammarAccess.getCranePositionParameterAccess().getGroup(), "rule__CranePositionParameter__Group__0");
			builder.put(grammarAccess.getDiskAccess().getGroup(), "rule__Disk__Group__0");
			builder.put(grammarAccess.getDiskSlotParameterAccess().getGroup(), "rule__DiskSlotParameter__Group__0");
			builder.put(grammarAccess.getDiskZoneParameterAccess().getGroup(), "rule__DiskZoneParameter__Group__0");
			builder.put(grammarAccess.getCameraAccess().getGroup(), "rule__Camera__Group__0");
			builder.put(grammarAccess.getCameraColorParameterAccess().getGroup(), "rule__CameraColorParameter__Group__0");
			builder.put(grammarAccess.getDeviceConditionalAccess().getGroup(), "rule__DeviceConditional__Group__0");
			builder.put(grammarAccess.getVariableConditionalAccess().getGroup(), "rule__VariableConditional__Group__0");
			builder.put(grammarAccess.getCranePickupOperationAccess().getGroup(), "rule__CranePickupOperation__Group__0");
			builder.put(grammarAccess.getCraneDropOperationAccess().getGroup(), "rule__CraneDropOperation__Group__0");
			builder.put(grammarAccess.getDiskMoveSlotOperationAccess().getGroup(), "rule__DiskMoveSlotOperation__Group__0");
			builder.put(grammarAccess.getDiskMoveVariableSlotOperationAccess().getGroup(), "rule__DiskMoveVariableSlotOperation__Group__0");
			builder.put(grammarAccess.getDiskMoveEmptySlotOperationAccess().getGroup(), "rule__DiskMoveEmptySlotOperation__Group__0");
			builder.put(grammarAccess.getDiskMarkSlotOperationAccess().getGroup(), "rule__DiskMarkSlotOperation__Group__0");
			builder.put(grammarAccess.getDiskMarkSlotOperationAccess().getGroup_8(), "rule__DiskMarkSlotOperation__Group_8__0");
			builder.put(grammarAccess.getDiskWaitOperationAccess().getGroup(), "rule__DiskWaitOperation__Group__0");
			builder.put(grammarAccess.getCameraScanOperationAccess().getGroup(), "rule__CameraScanOperation__Group__0");
			builder.put(grammarAccess.getForEachAccess().getGroup(), "rule__ForEach__Group__0");
			builder.put(grammarAccess.getLocalVariableAccess().getGroup(), "rule__LocalVariable__Group__0");
			builder.put(grammarAccess.getGlobalVariableAccess().getGroup(), "rule__GlobalVariable__Group__0");
			builder.put(grammarAccess.getModelAccess().getConfigurationsAssignment_0(), "rule__Model__ConfigurationsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getStatementsAssignment_1(), "rule__Model__StatementsAssignment_1");
			builder.put(grammarAccess.getConfigurationAccess().getDeviceAssignment_1(), "rule__Configuration__DeviceAssignment_1");
			builder.put(grammarAccess.getCraneAccess().getNameAssignment_3(), "rule__Crane__NameAssignment_3");
			builder.put(grammarAccess.getCraneAccess().getTargetsAssignment_5(), "rule__Crane__TargetsAssignment_5");
			builder.put(grammarAccess.getCranePositionParameterAccess().getDegreeAssignment_4(), "rule__CranePositionParameter__DegreeAssignment_4");
			builder.put(grammarAccess.getCranePositionParameterAccess().getNameAssignment_6(), "rule__CranePositionParameter__NameAssignment_6");
			builder.put(grammarAccess.getDiskAccess().getNameAssignment_3(), "rule__Disk__NameAssignment_3");
			builder.put(grammarAccess.getDiskAccess().getSlotParameterAssignment_5(), "rule__Disk__SlotParameterAssignment_5");
			builder.put(grammarAccess.getDiskAccess().getTargetsAssignment_6(), "rule__Disk__TargetsAssignment_6");
			builder.put(grammarAccess.getDiskSlotParameterAccess().getSizeAssignment_2(), "rule__DiskSlotParameter__SizeAssignment_2");
			builder.put(grammarAccess.getDiskZoneParameterAccess().getNameAssignment_4(), "rule__DiskZoneParameter__NameAssignment_4");
			builder.put(grammarAccess.getDiskZoneParameterAccess().getSlotAssignment_7(), "rule__DiskZoneParameter__SlotAssignment_7");
			builder.put(grammarAccess.getCameraAccess().getNameAssignment_3(), "rule__Camera__NameAssignment_3");
			builder.put(grammarAccess.getCameraAccess().getTargetsAssignment_5(), "rule__Camera__TargetsAssignment_5");
			builder.put(grammarAccess.getCameraColorParameterAccess().getColorAssignment_4(), "rule__CameraColorParameter__ColorAssignment_4");
			builder.put(grammarAccess.getDeviceConditionalAccess().getDeviceAssignment_3(), "rule__DeviceConditional__DeviceAssignment_3");
			builder.put(grammarAccess.getDeviceConditionalAccess().getNot_operatorAssignment_5(), "rule__DeviceConditional__Not_operatorAssignment_5");
			builder.put(grammarAccess.getDeviceConditionalAccess().getDeviceValueAssignment_7(), "rule__DeviceConditional__DeviceValueAssignment_7");
			builder.put(grammarAccess.getDeviceConditionalAccess().getStatementsAssignment_10(), "rule__DeviceConditional__StatementsAssignment_10");
			builder.put(grammarAccess.getVariableConditionalAccess().getVariableAssignment_3(), "rule__VariableConditional__VariableAssignment_3");
			builder.put(grammarAccess.getVariableConditionalAccess().getComparison_operatorAssignment_5(), "rule__VariableConditional__Comparison_operatorAssignment_5");
			builder.put(grammarAccess.getVariableConditionalAccess().getVariableValueAssignment_6(), "rule__VariableConditional__VariableValueAssignment_6");
			builder.put(grammarAccess.getVariableConditionalAccess().getStatementsAssignment_9(), "rule__VariableConditional__StatementsAssignment_9");
			builder.put(grammarAccess.getCranePickupOperationAccess().getDeviceAssignment_1(), "rule__CranePickupOperation__DeviceAssignment_1");
			builder.put(grammarAccess.getCranePickupOperationAccess().getTargetAssignment_5(), "rule__CranePickupOperation__TargetAssignment_5");
			builder.put(grammarAccess.getCraneDropOperationAccess().getDeviceAssignment_1(), "rule__CraneDropOperation__DeviceAssignment_1");
			builder.put(grammarAccess.getCraneDropOperationAccess().getTargetAssignment_5(), "rule__CraneDropOperation__TargetAssignment_5");
			builder.put(grammarAccess.getDiskMoveSlotOperationAccess().getDeviceAssignment_1(), "rule__DiskMoveSlotOperation__DeviceAssignment_1");
			builder.put(grammarAccess.getDiskMoveSlotOperationAccess().getSourceAssignment_5(), "rule__DiskMoveSlotOperation__SourceAssignment_5");
			builder.put(grammarAccess.getDiskMoveSlotOperationAccess().getTargetAssignment_7(), "rule__DiskMoveSlotOperation__TargetAssignment_7");
			builder.put(grammarAccess.getDiskMoveVariableSlotOperationAccess().getDeviceAssignment_1(), "rule__DiskMoveVariableSlotOperation__DeviceAssignment_1");
			builder.put(grammarAccess.getDiskMoveVariableSlotOperationAccess().getVariableAssignment_5(), "rule__DiskMoveVariableSlotOperation__VariableAssignment_5");
			builder.put(grammarAccess.getDiskMoveVariableSlotOperationAccess().getTargetAssignment_7(), "rule__DiskMoveVariableSlotOperation__TargetAssignment_7");
			builder.put(grammarAccess.getDiskMoveEmptySlotOperationAccess().getDeviceAssignment_1(), "rule__DiskMoveEmptySlotOperation__DeviceAssignment_1");
			builder.put(grammarAccess.getDiskMoveEmptySlotOperationAccess().getTargetAssignment_6(), "rule__DiskMoveEmptySlotOperation__TargetAssignment_6");
			builder.put(grammarAccess.getDiskMarkSlotOperationAccess().getDeviceAssignment_1(), "rule__DiskMarkSlotOperation__DeviceAssignment_1");
			builder.put(grammarAccess.getDiskMarkSlotOperationAccess().getTargetAssignment_5(), "rule__DiskMarkSlotOperation__TargetAssignment_5");
			builder.put(grammarAccess.getDiskMarkSlotOperationAccess().getDiskSlotValueAssignment_7(), "rule__DiskMarkSlotOperation__DiskSlotValueAssignment_7");
			builder.put(grammarAccess.getDiskMarkSlotOperationAccess().getQuantityAssignment_8_1(), "rule__DiskMarkSlotOperation__QuantityAssignment_8_1");
			builder.put(grammarAccess.getDiskMarkSlotOperationAccess().getMeasureAssignment_8_2(), "rule__DiskMarkSlotOperation__MeasureAssignment_8_2");
			builder.put(grammarAccess.getDiskWaitOperationAccess().getDeviceAssignment_1(), "rule__DiskWaitOperation__DeviceAssignment_1");
			builder.put(grammarAccess.getCameraScanOperationAccess().getDeviceAssignment_1(), "rule__CameraScanOperation__DeviceAssignment_1");
			builder.put(grammarAccess.getCameraScanOperationAccess().getVariableAssignment_5(), "rule__CameraScanOperation__VariableAssignment_5");
			builder.put(grammarAccess.getForEachAccess().getVariableAssignment_3(), "rule__ForEach__VariableAssignment_3");
			builder.put(grammarAccess.getForEachAccess().getDeviceAssignment_5(), "rule__ForEach__DeviceAssignment_5");
			builder.put(grammarAccess.getForEachAccess().getOperatorAssignment_8(), "rule__ForEach__OperatorAssignment_8");
			builder.put(grammarAccess.getForEachAccess().getVariableValueAssignment_9(), "rule__ForEach__VariableValueAssignment_9");
			builder.put(grammarAccess.getForEachAccess().getStatementsAssignment_12(), "rule__ForEach__StatementsAssignment_12");
			builder.put(grammarAccess.getLocalVariableAccess().getNameAssignment_1(), "rule__LocalVariable__NameAssignment_1");
			builder.put(grammarAccess.getGlobalVariableAccess().getNameAssignment_1(), "rule__GlobalVariable__NameAssignment_1");
			builder.put(grammarAccess.getDeviceValueAccess().getValueAssignment_0(), "rule__DeviceValue__ValueAssignment_0");
			builder.put(grammarAccess.getDeviceValueAccess().getValueAssignment_1(), "rule__DeviceValue__ValueAssignment_1");
			builder.put(grammarAccess.getDeviceValueAccess().getRefAssignment_2(), "rule__DeviceValue__RefAssignment_2");
			builder.put(grammarAccess.getDiskSlotValueAccess().getValueAssignment_0(), "rule__DiskSlotValue__ValueAssignment_0");
			builder.put(grammarAccess.getDiskSlotValueAccess().getValueAssignment_1(), "rule__DiskSlotValue__ValueAssignment_1");
			builder.put(grammarAccess.getDiskSlotValueAccess().getRefAssignment_2(), "rule__DiskSlotValue__RefAssignment_2");
			builder.put(grammarAccess.getVariableValueAccess().getValueAssignment_0(), "rule__VariableValue__ValueAssignment_0");
			builder.put(grammarAccess.getVariableValueAccess().getValueAssignment_1(), "rule__VariableValue__ValueAssignment_1");
			builder.put(grammarAccess.getVariableValueAccess().getValueAssignment_2(), "rule__VariableValue__ValueAssignment_2");
			builder.put(grammarAccess.getVariableValueAccess().getValueAssignment_3(), "rule__VariableValue__ValueAssignment_3");
			builder.put(grammarAccess.getVariableValueAccess().getRefAssignment_4(), "rule__VariableValue__RefAssignment_4");
			builder.put(grammarAccess.getDiskStateValueAccess().getValueAssignment(), "rule__DiskStateValue__ValueAssignment");
			builder.put(grammarAccess.getDiskSlotStateValueAccess().getValueAssignment(), "rule__DiskSlotStateValue__ValueAssignment");
			builder.put(grammarAccess.getColorValueAccess().getValueAssignment(), "rule__ColorValue__ValueAssignment");
			builder.put(grammarAccess.getNumberAccess().getValueAssignment(), "rule__Number__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FactoryLangGrammarAccess grammarAccess;

	@Override
	protected InternalFactoryLangParser createParser() {
		InternalFactoryLangParser result = new InternalFactoryLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new FactoryLangTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FactoryLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FactoryLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
